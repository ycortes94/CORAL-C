{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _emotion = require('emotion');\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _utils = require('./utils');\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _Button = require('../../styles/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _FormControlList = require('../../styles/FormControlList');\n\nvar _utils2 = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // showLoadMore is experimental API and works only with ES6\n\n\nvar SingleList = function (_Component) {\n  _inherits(SingleList, _Component);\n\n  function SingleList(props) {\n    _classCallCheck(this, SingleList);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentValue: '',\n      options: props.options && props.options[props.dataField] ? _this.getOptions(props.options[props.dataField].buckets, props) : [],\n      searchTerm: '',\n      after: {},\n      // for composite aggs\n      isLastBucket: false\n    };\n    _this.locked = false;\n    _this.internalComponent = props.componentId + '__internal';\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  SingleList.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.internalComponent);\n    this.props.addComponent(this.props.componentId);\n    this.updateQueryOptions(this.props);\n    this.setReact(this.props);\n\n    if (this.props.selectedValue) {\n      this.setValue(this.props.selectedValue);\n    } else if (this.props.defaultSelected) {\n      this.setValue(this.props.defaultSelected);\n    }\n  };\n\n  SingleList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      return _this2.setReact(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.options, nextProps.options, function () {\n      var showLoadMore = nextProps.showLoadMore,\n          dataField = nextProps.dataField;\n\n      if (showLoadMore) {\n        var buckets = nextProps.options[dataField].buckets;\n        var after = nextProps.options[dataField].after_key; // detect the last bucket by checking if the after key is absent\n\n        var isLastBucket = !after;\n\n        _this2.setState(function (state) {\n          return _extends({}, state, {\n            after: after ? {\n              after: after\n            } : state.after,\n            isLastBucket: isLastBucket,\n            options: _this2.getOptions(buckets, nextProps)\n          });\n        });\n      } else {\n        _this2.setState({\n          options: nextProps.options[nextProps.dataField] ? _this2.getOptions(nextProps.options[nextProps.dataField].buckets, nextProps) : []\n        });\n      }\n    });\n    (0, _helper.checkSomePropChange)(this.props, nextProps, ['size', 'sortBy'], function () {\n      return _this2.updateQueryOptions(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.dataField, nextProps.dataField, function () {\n      _this2.updateQueryOptions(nextProps);\n\n      _this2.updateQuery(_this2.state.currentValue, nextProps);\n    });\n\n    if (this.props.defaultSelected !== nextProps.defaultSelected) {\n      this.setValue(nextProps.defaultSelected);\n    } else if (this.state.currentValue !== nextProps.selectedValue) {\n      this.setValue(nextProps.selectedValue || '');\n    }\n  };\n\n  SingleList.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  SingleList.generateQueryOptions = function generateQueryOptions(props, after) {\n    var queryOptions = (0, _helper.getQueryOptions)(props);\n    return props.showLoadMore ? (0, _utils.getCompositeAggsQuery)(queryOptions, props, after) : (0, _utils.getAggsQuery)(queryOptions, props);\n  };\n\n  SingleList.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        selectAllLabel = _props.selectAllLabel,\n        renderListItem = _props.renderListItem,\n        showLoadMore = _props.showLoadMore,\n        loadMoreLabel = _props.loadMoreLabel;\n    var isLastBucket = this.state.isLastBucket;\n\n    if (this.state.options.length === 0) {\n      return null;\n    }\n\n    var itemsToRender = this.state.options;\n\n    if (this.props.transformData) {\n      itemsToRender = this.props.transformData(itemsToRender);\n    }\n\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.renderSearch(), _react2.default.createElement(_FormControlList.UL, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'list') || null\n    }, selectAllLabel ? _react2.default.createElement('li', {\n      key: selectAllLabel,\n      className: '' + (this.state.currentValue === selectAllLabel ? 'active' : '')\n    }, _react2.default.createElement(_FormControlList.Radio, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'radio'),\n      id: this.props.componentId + '-' + selectAllLabel,\n      name: this.props.componentId,\n      value: selectAllLabel,\n      onClick: this.handleClick,\n      readOnly: true,\n      checked: this.state.currentValue === selectAllLabel,\n      show: this.props.showRadio\n    }), _react2.default.createElement('label', {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'label') || null,\n      htmlFor: this.props.componentId + '-' + selectAllLabel\n    }, selectAllLabel)) : null, itemsToRender.filter(function (item) {\n      if (String(item.key).length) {\n        if (_this3.props.showSearch && _this3.state.searchTerm) {\n          return String(item.key).toLowerCase().includes(_this3.state.searchTerm.toLowerCase());\n        }\n\n        return true;\n      }\n\n      return false;\n    }).map(function (item) {\n      return _react2.default.createElement('li', {\n        key: item.key,\n        className: '' + (_this3.state.currentValue === String(item.key) ? 'active' : '')\n      }, _react2.default.createElement(_FormControlList.Radio, {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'radio'),\n        id: _this3.props.componentId + '-' + item.key,\n        name: _this3.props.componentId,\n        value: item.key,\n        readOnly: true,\n        onClick: _this3.handleClick,\n        checked: _this3.state.currentValue === String(item.key),\n        show: _this3.props.showRadio\n      }), _react2.default.createElement('label', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'label') || null,\n        htmlFor: _this3.props.componentId + '-' + item.key\n      }, renderListItem ? renderListItem(item.key, item.doc_count) : _react2.default.createElement('span', null, item.key, _this3.props.showCount && _react2.default.createElement('span', {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'count') || null\n      }, '\\xA0(', item.doc_count, ')'))));\n    }), showLoadMore && !isLastBucket && _react2.default.createElement('div', {\n      className: (0, _emotion.css)(_Button.loadMoreContainer)\n    }, _react2.default.createElement(_Button2.default, {\n      onClick: this.handleLoadMore\n    }, loadMoreLabel))));\n  };\n\n  return SingleList;\n}(_react.Component);\n\nSingleList.defaultQuery = function (value, props) {\n  if (props.selectAllLabel && props.selectAllLabel === value) {\n    if (props.showMissing) {\n      return {\n        match_all: {}\n      };\n    }\n\n    return {\n      exists: {\n        field: props.dataField\n      }\n    };\n  } else if (value) {\n    var _term;\n\n    if (props.showMissing && props.missingLabel === value) {\n      return {\n        bool: {\n          must_not: {\n            exists: {\n              field: props.dataField\n            }\n          }\n        }\n      };\n    }\n\n    return {\n      term: (_term = {}, _term[props.dataField] = value, _term)\n    };\n  }\n\n  return null;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: _this4.internalComponent\n      });\n    }\n  };\n\n  this.getOptions = function (buckets, props) {\n    if (props.showLoadMore) {\n      return buckets.map(function (bucket) {\n        return {\n          key: bucket.key[props.dataField],\n          doc_count: bucket.doc_count\n        };\n      });\n    }\n\n    return buckets;\n  };\n\n  this.setValue = function (nextValue) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n    var value = nextValue;\n\n    if (nextValue === _this4.state.currentValue) {\n      value = '';\n    }\n\n    var performUpdate = function performUpdate() {\n      _this4.setState({\n        currentValue: value\n      }, function () {\n        _this4.updateQuery(value, props);\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(value);\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var query = props.customQuery || SingleList.defaultQuery;\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query(value, props),\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'SINGLELIST'\n    });\n  };\n\n  this.updateQueryOptions = function (props) {\n    var addAfterKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // when using composite aggs flush the current options for a fresh query\n\n    if (props.showLoadMore && !addAfterKey) {\n      _this4.setState({\n        options: []\n      });\n    } // for a new query due to other changes don't append after to get fresh results\n\n\n    var queryOptions = SingleList.generateQueryOptions(props, addAfterKey ? _this4.state.after : {});\n    props.setQueryOptions(_this4.internalComponent, queryOptions);\n  };\n\n  this.handleInputChange = function (e) {\n    var value = e.target.value;\n\n    _this4.setState({\n      searchTerm: value\n    });\n  };\n\n  this.handleLoadMore = function () {\n    var queryOptions = SingleList.generateQueryOptions(_this4.props, _this4.state.after);\n\n    _this4.props.loadMore(_this4.props.componentId, queryOptions);\n  };\n\n  this.renderSearch = function () {\n    if (_this4.props.showSearch) {\n      return _react2.default.createElement(_Input2.default, {\n        className: (0, _helper.getClassName)(_this4.props.innerClass, 'input') || null,\n        onChange: _this4.handleInputChange,\n        value: _this4.state.searchTerm,\n        placeholder: _this4.props.placeholder,\n        style: {\n          margin: '0 0 8px'\n        },\n        themePreset: _this4.props.themePreset\n      });\n    }\n\n    return null;\n  };\n\n  this.handleClick = function (e) {\n    _this4.setValue(e.target.value);\n  };\n};\n\nSingleList.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  loadMore: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  options: _types2.default.options,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  dataField: _types2.default.stringRequired,\n  defaultSelected: _types2.default.string,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  react: _types2.default.react,\n  renderListItem: _types2.default.func,\n  transformData: _types2.default.func,\n  selectAllLabel: _types2.default.string,\n  showCount: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  showRadio: _types2.default.boolRequired,\n  showSearch: _types2.default.bool,\n  size: _types2.default.number,\n  sortBy: _types2.default.sortByWithCount,\n  style: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool,\n  showMissing: _types2.default.bool,\n  missingLabel: _types2.default.string,\n  showLoadMore: _types2.default.bool,\n  loadMoreLabel: _types2.default.title\n};\nSingleList.defaultProps = {\n  className: null,\n  placeholder: 'Search',\n  showCount: true,\n  showFilter: true,\n  showRadio: true,\n  showSearch: true,\n  size: 100,\n  sortBy: 'count',\n  style: {},\n  URLParams: false,\n  showMissing: false,\n  missingLabel: 'N/A',\n  showLoadMore: false,\n  loadMoreLabel: 'Load More'\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    options: state.aggregations[props.componentId],\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || '',\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    },\n    loadMore: function loadMore(component, aggsQuery) {\n      return dispatch((0, _actions.loadMore)(component, aggsQuery, true, true));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nexports.default = (0, _utils2.connect)(mapStateToProps, mapDispatchtoProps)(SingleList);","map":null,"metadata":{},"sourceType":"script"}