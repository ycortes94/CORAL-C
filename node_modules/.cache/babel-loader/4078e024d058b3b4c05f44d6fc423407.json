{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = watchManReducer;\n\nvar _constants = require('../constants');\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction getWatchList(depTree) {\n  var list = Object.values(depTree);\n  var components = [];\n  list.forEach(function (item) {\n    if (typeof item === 'string') {\n      components.push(item);\n    } else if (Array.isArray(item)) {\n      item.forEach(function (component) {\n        if (typeof component === 'string') {\n          components.push(component);\n        } else {\n          components.push.apply(components, _toConsumableArray(getWatchList(component)));\n        }\n      });\n    } else if (typeof item === 'object' && item !== null) {\n      components.push.apply(components, _toConsumableArray(getWatchList(item)));\n    }\n  });\n  return components.filter(function (value, index, array) {\n    return array.indexOf(value) === index;\n  });\n}\n\nfunction watchManReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments[1];\n\n  if (action.type === _constants.WATCH_COMPONENT) {\n    var watchList = getWatchList(action.react);\n\n    var newState = _extends({}, state);\n\n    Object.keys(newState).forEach(function (key) {\n      newState[key] = newState[key].filter(function (value) {\n        return value !== action.component;\n      });\n    });\n    watchList.forEach(function (item) {\n      if (Array.isArray(newState[item])) {\n        newState[item] = [].concat(_toConsumableArray(newState[item]), [action.component]);\n      } else {\n        newState[item] = [action.component];\n      }\n    });\n    return newState;\n  }\n\n  return state;\n}","map":null,"metadata":{},"sourceType":"script"}