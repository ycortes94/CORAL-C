{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.setQuery = setQuery;\nexports.updateQueryOptions = updateQueryOptions;\nexports.logQuery = logQuery;\nexports.logCombinedQuery = logCombinedQuery;\nexports.setStreaming = setStreaming;\nexports.setHeaders = setHeaders;\nexports.executeQuery = executeQuery;\nexports.setQueryOptions = setQueryOptions;\nexports.updateQuery = updateQuery;\nexports.loadMore = loadMore;\nexports.setQueryListener = setQueryListener;\n\nvar _constants = require('../constants');\n\nvar _value = require('./value');\n\nvar _hits = require('./hits');\n\nvar _helper = require('../utils/helper');\n\nvar _analytics = require('../utils/analytics');\n\nvar _analytics2 = _interopRequireDefault(_analytics);\n\nvar _maps = require('./maps');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction setQuery(component, query) {\n  return {\n    type: _constants.SET_QUERY,\n    component: component,\n    query: query\n  };\n}\n\nfunction updateQueryOptions(component, options) {\n  return {\n    type: _constants.SET_QUERY_OPTIONS,\n    component: component,\n    options: options\n  };\n}\n\nfunction logQuery(component, query) {\n  return {\n    type: _constants.LOG_QUERY,\n    component: component,\n    query: query\n  };\n}\n\nfunction logCombinedQuery(component, query) {\n  return {\n    type: _constants.LOG_COMBINED_QUERY,\n    component: component,\n    query: query\n  };\n}\n\nfunction setLoading(component, isLoading) {\n  return {\n    type: _constants.SET_LOADING,\n    component: component,\n    isLoading: isLoading\n  };\n}\n\nfunction setTimestamp(component, timestamp) {\n  return {\n    type: _constants.SET_TIMESTAMP,\n    component: component,\n    timestamp: timestamp\n  };\n}\n\nfunction setStreaming(component) {\n  var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return {\n    type: _constants.SET_STREAMING,\n    component: component,\n    status: status,\n    ref: ref\n  };\n}\n\nfunction setHeaders(headers) {\n  return {\n    type: _constants.SET_HEADERS,\n    headers: headers\n  };\n}\n\nfunction setSearchId() {\n  var searchId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return {\n    type: _constants.SET_SEARCH_ID,\n    searchId: searchId\n  };\n}\n\nfunction msearch(query, orderOfQueries) {\n  var appendToHits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isInternalComponent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var appendToAggs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        appbaseRef = _getState.appbaseRef,\n        config = _getState.config,\n        headers = _getState.headers,\n        queryListener = _getState.queryListener,\n        analytics = _getState.analytics,\n        selectedValues = _getState.selectedValues;\n\n    var searchHeaders = {};\n\n    if (config.analytics && !isInternalComponent) {\n      var searchValue = analytics.searchValue,\n          searchId = analytics.searchId;\n      var filterString = (0, _analytics2.default)(selectedValues);\n\n      if (searchId) {\n        searchHeaders = _extends({\n          'X-Search-Id': searchId\n        }, filterString && {\n          'X-Search-Filters': filterString\n        });\n      } else if (searchValue) {\n        searchHeaders = _extends({\n          'X-Search-Query': searchValue\n        }, filterString && {\n          'X-Search-Filters': filterString\n        });\n      }\n    }\n\n    appbaseRef.setHeaders(_extends({}, headers, searchHeaders));\n    appbaseRef.msearch({\n      type: config.type === '*' ? '' : config.type,\n      body: query\n    }).then(function (res) {\n      var searchId = res._headers.get('X-Search-Id');\n\n      if (searchId) {\n        dispatch(setSearchId(searchId));\n      }\n\n      orderOfQueries.forEach(function (component, index) {\n        var response = res.responses[index];\n\n        var _getState2 = getState(),\n            timestamp = _getState2.timestamp;\n\n        if (timestamp[component] === undefined || timestamp[component] < res._timestamp) {\n          if (response.hits) {\n            dispatch(setTimestamp(component, res._timestamp));\n            dispatch((0, _hits.updateHits)(component, response.hits, response.took, appendToHits));\n            dispatch(setLoading(component, false));\n          }\n\n          if (response.aggregations) {\n            dispatch((0, _hits.updateAggs)(component, response.aggregations, appendToAggs));\n          }\n        }\n      });\n    }).catch(function (error) {\n      console.error(error);\n      orderOfQueries.forEach(function (component) {\n        if (queryListener[component] && queryListener[component].onError) {\n          queryListener[component].onError(error);\n        }\n\n        dispatch(setLoading(component, false));\n      });\n    });\n  };\n}\n\nfunction executeQueryListener(listener, oldQuery, newQuery) {\n  if (listener && listener.onQueryChange) {\n    listener.onQueryChange(oldQuery, newQuery);\n  }\n}\n\nfunction executeQuery(componentId) {\n  var executeWatchList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var mustExecuteMapQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return function (dispatch, getState) {\n    var _getState3 = getState(),\n        queryLog = _getState3.queryLog,\n        stream = _getState3.stream,\n        appbaseRef = _getState3.appbaseRef,\n        config = _getState3.config,\n        mapData = _getState3.mapData,\n        watchMan = _getState3.watchMan,\n        dependencyTree = _getState3.dependencyTree,\n        queryList = _getState3.queryList,\n        queryOptions = _getState3.queryOptions,\n        queryListener = _getState3.queryListener;\n\n    var orderOfQueries = [];\n    var finalQuery = [];\n    var matchAllQuery = {\n      match_all: {}\n    };\n    var componentList = [componentId];\n\n    if (executeWatchList) {\n      var watchList = watchMan[componentId] || [];\n      componentList = [].concat(_toConsumableArray(componentList), _toConsumableArray(watchList));\n    }\n\n    componentList.forEach(function (component) {\n      var _buildQuery = (0, _helper.buildQuery)(component, dependencyTree, queryList, queryOptions),\n          queryObj = _buildQuery.queryObj,\n          options = _buildQuery.options;\n\n      var validOptions = ['aggs', 'from', 'sort'];\n\n      if (queryObj && !!Object.keys(queryObj).length || options && Object.keys(options).some(function (item) {\n        return validOptions.includes(item);\n      })) {\n        if (!queryObj || queryObj && !Object.keys(queryObj).length) {\n          queryObj = _extends({}, matchAllQuery);\n        }\n\n        var currentQuery = _extends({\n          query: _extends({}, queryObj)\n        }, options, queryOptions[component]);\n\n        var queryToLog = _extends({\n          query: _extends({}, queryObj)\n        }, options, queryOptions[component]);\n\n        var oldQuery = queryLog[component];\n\n        if (mustExecuteMapQuery || !(0, _helper.isEqual)(currentQuery, oldQuery)) {\n          orderOfQueries = [].concat(_toConsumableArray(orderOfQueries), [component]);\n          dispatch(logQuery(component, queryToLog));\n          var isMapComponent = Object.keys(mapData).includes(component);\n\n          if (isMapComponent && mapData[component].query) {\n            var existingQuery = currentQuery.query;\n            currentQuery.query = {\n              bool: {\n                must: [existingQuery, mapData[component].query]\n              }\n            };\n\n            if (!mapData[component].persistMapQuery) {\n              dispatch((0, _maps.updateMapData)(componentId, null, false));\n            }\n\n            var _getState4 = getState(),\n                combinedLog = _getState4.combinedLog;\n\n            if ((0, _helper.isEqual)(combinedLog[component], currentQuery)) return;\n            dispatch(logCombinedQuery(component, currentQuery));\n          }\n\n          executeQueryListener(queryListener[component], oldQuery, currentQuery);\n\n          if (stream[component] && stream[component].status) {\n            if (stream[component].ref) {\n              stream[component].ref.stop();\n            }\n\n            var ref = appbaseRef.searchStream({\n              type: config.type === '*' ? '' : config.type,\n              body: currentQuery\n            }, function (response) {\n              if (response._id) {\n                dispatch((0, _hits.pushToStreamHits)(component, response));\n              }\n            }, function (error) {\n              if (queryListener[component] && queryListener[component].onError) {\n                queryListener[component].onError(error);\n              }\n\n              console.warn(error);\n              dispatch(setLoading(component, false));\n            });\n            dispatch(setStreaming(component, true, ref));\n          }\n\n          finalQuery = [].concat(_toConsumableArray(finalQuery), [{\n            preference: component\n          }, currentQuery]);\n        }\n      }\n    });\n\n    if (finalQuery.length) {\n      dispatch(msearch(finalQuery, orderOfQueries, false, componentId.endsWith('__internal')));\n    }\n  };\n}\n\nfunction setQueryOptions(component, queryOptions) {\n  var execute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (dispatch) {\n    dispatch(updateQueryOptions(component, queryOptions));\n\n    if (execute) {\n      dispatch(executeQuery(component, true));\n    }\n  };\n}\n\nfunction updateQuery(_ref) {\n  var componentId = _ref.componentId,\n      query = _ref.query,\n      value = _ref.value,\n      _ref$label = _ref.label,\n      label = _ref$label === undefined ? null : _ref$label,\n      _ref$showFilter = _ref.showFilter,\n      showFilter = _ref$showFilter === undefined ? true : _ref$showFilter,\n      _ref$URLParams = _ref.URLParams,\n      URLParams = _ref$URLParams === undefined ? false : _ref$URLParams,\n      _ref$componentType = _ref.componentType,\n      componentType = _ref$componentType === undefined ? null : _ref$componentType;\n  var execute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return function (dispatch) {\n    var queryToDispatch = query;\n\n    if (query && query.query) {\n      queryToDispatch = query.query;\n    }\n\n    if (!componentId.endsWith('__internal')) {\n      dispatch((0, _value.setValue)(componentId, value, label, showFilter, URLParams, componentType));\n    }\n\n    dispatch(setQuery(componentId, queryToDispatch));\n    if (execute) dispatch(executeQuery(componentId, true));\n  };\n}\n\nfunction loadMore(component, newOptions) {\n  var appendToHits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var appendToAggs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return function (dispatch, getState) {\n    var store = getState();\n\n    var _buildQuery2 = (0, _helper.buildQuery)(component, store.dependencyTree, store.queryList, store.queryOptions),\n        queryObj = _buildQuery2.queryObj,\n        options = _buildQuery2.options;\n\n    var queryLog = store.queryLog;\n    if (!options) options = {};\n    options = _extends({}, options, newOptions);\n\n    if (!queryObj || queryObj && !Object.keys(queryObj).length) {\n      queryObj = {\n        match_all: {}\n      };\n    }\n\n    var currentQuery = _extends({\n      query: _extends({}, queryObj)\n    }, options);\n\n    if ((0, _helper.isEqual)(queryLog[component], currentQuery)) return;\n    dispatch(logQuery(component, currentQuery));\n    var finalQuery = [{\n      preference: component\n    }, currentQuery];\n    dispatch(msearch(finalQuery, [component], appendToHits, false, appendToAggs));\n  };\n}\n\nfunction setQueryListener(component, onQueryChange, onError) {\n  return {\n    type: _constants.SET_QUERY_LISTENER,\n    component: component,\n    onQueryChange: onQueryChange,\n    onError: onError\n  };\n}","map":null,"metadata":{},"sourceType":"script"}