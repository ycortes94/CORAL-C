{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _SliderConstants = require('./constants/SliderConstants');\n\nvar SliderConstants = _interopRequireWildcard(_SliderConstants);\n\nvar _linear = require('./algorithms/linear');\n\nvar _linear2 = _interopRequireDefault(_linear);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* globals document */\n\n/* eslint react/no-array-index-key: 1 */\n\n\nfunction getClassName(props) {\n  var orientation = props.orientation === 'vertical' ? 'rheostat-vertical' : 'rheostat-horizontal';\n  return ['rheostat', orientation].concat(props.className.split(' ')).join(' ');\n}\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar PropTypeArrOfNumber = _propTypes2['default'].arrayOf(_propTypes2['default'].number);\n\nvar PropTypeReactComponent = _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]);\n\nfunction getHandleFor(ev) {\n  return Number(ev.currentTarget.getAttribute('data-handle-key'));\n}\n\nfunction killEvent(ev) {\n  ev.stopPropagation();\n  ev.preventDefault();\n}\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: 'render',\n    value: function () {\n      function render() {\n        return _react2['default'].createElement('button', _extends({}, this.props, {\n          type: 'button'\n        }));\n      }\n\n      return render;\n    }()\n  }]);\n\n  return Button;\n}(_react2['default'].Component);\n\nvar propTypes = {\n  // the algorithm to use\n  algorithm: _propTypes2['default'].shape({\n    getValue: _propTypes2['default'].func,\n    getPosition: _propTypes2['default'].func\n  }),\n  // any children you pass in\n  children: _propTypes2['default'].node,\n  // standard class name you'd like to apply to the root element\n  className: _propTypes2['default'].string,\n  // prevent the slider from moving when clicked\n  disabled: _propTypes2['default'].bool,\n  // a custom handle you can pass in\n  handle: PropTypeReactComponent,\n  // the maximum possible value\n  max: _propTypes2['default'].number,\n  // the minimum possible value\n  min: _propTypes2['default'].number,\n  // called on click\n  onClick: _propTypes2['default'].func,\n  // called whenever the user is done changing values on the slider\n  onChange: _propTypes2['default'].func,\n  // called on key press\n  onKeyPress: _propTypes2['default'].func,\n  // called when you finish dragging a handle\n  onSliderDragEnd: _propTypes2['default'].func,\n  // called every time the slider is dragged and the value changes\n  onSliderDragMove: _propTypes2['default'].func,\n  // called when you start dragging a handle\n  onSliderDragStart: _propTypes2['default'].func,\n  // called whenever the user is actively changing the values on the slider\n  // (dragging, clicked, keypress)\n  onValuesUpdated: _propTypes2['default'].func,\n  // the orientation\n  orientation: _propTypes2['default'].oneOf(['horizontal', 'vertical']),\n  // a component for rendering the pits\n  pitComponent: PropTypeReactComponent,\n  // the points that pits are rendered on\n  pitPoints: PropTypeArrOfNumber,\n  // a custom progress bar you can pass in\n  progressBar: PropTypeReactComponent,\n  // should we snap?\n  snap: _propTypes2['default'].bool,\n  // the points we should snap to\n  snapPoints: PropTypeArrOfNumber,\n  // whether a proposed update is valid\n  getNextHandlePosition: _propTypes2['default'].func,\n  // the values\n  values: PropTypeArrOfNumber\n};\nvar defaultProps = {\n  algorithm: _linear2['default'],\n  className: '',\n  children: null,\n  disabled: false,\n  handle: Button,\n  max: SliderConstants.PERCENT_FULL,\n  min: SliderConstants.PERCENT_EMPTY,\n  onClick: null,\n  onChange: null,\n  onKeyPress: null,\n  onSliderDragEnd: null,\n  onSliderDragMove: null,\n  onSliderDragStart: null,\n  onValuesUpdated: null,\n  orientation: 'horizontal',\n  pitComponent: null,\n  pitPoints: [],\n  progressBar: 'div',\n  snap: false,\n  snapPoints: [],\n  getNextHandlePosition: null,\n  values: [SliderConstants.PERCENT_EMPTY]\n};\n\nvar Rheostat = function (_React$Component2) {\n  _inherits(Rheostat, _React$Component2);\n\n  function Rheostat(props) {\n    _classCallCheck(this, Rheostat);\n\n    var _this2 = _possibleConstructorReturn(this, (Rheostat.__proto__ || Object.getPrototypeOf(Rheostat)).call(this, props));\n\n    var _this2$props = _this2.props,\n        algorithm = _this2$props.algorithm,\n        max = _this2$props.max,\n        min = _this2$props.min,\n        values = _this2$props.values;\n    _this2.state = {\n      className: getClassName(_this2.props),\n      handlePos: values.map(function (value) {\n        return algorithm.getPosition(value, min, max);\n      }),\n      handleDimensions: 0,\n      // mousePos: null,\n      sliderBox: {},\n      slidingIndex: null,\n      values: values\n    };\n    _this2.getPublicState = _this2.getPublicState.bind(_this2);\n    _this2.getSliderBoundingBox = _this2.getSliderBoundingBox.bind(_this2);\n    _this2.getProgressStyle = _this2.getProgressStyle.bind(_this2);\n    _this2.getMinValue = _this2.getMinValue.bind(_this2);\n    _this2.getMaxValue = _this2.getMaxValue.bind(_this2);\n    _this2.getHandleDimensions = _this2.getHandleDimensions.bind(_this2);\n    _this2.getClosestSnapPoint = _this2.getClosestSnapPoint.bind(_this2);\n    _this2.getSnapPosition = _this2.getSnapPosition.bind(_this2);\n    _this2.getNextPositionForKey = _this2.getNextPositionForKey.bind(_this2);\n    _this2.getNextState = _this2.getNextState.bind(_this2);\n    _this2.handleClick = _this2.handleClick.bind(_this2);\n    _this2.getClosestHandle = _this2.getClosestHandle.bind(_this2);\n    _this2.setStartSlide = _this2.setStartSlide.bind(_this2);\n    _this2.startMouseSlide = _this2.startMouseSlide.bind(_this2);\n    _this2.startTouchSlide = _this2.startTouchSlide.bind(_this2);\n    _this2.handleMouseSlide = _this2.handleMouseSlide.bind(_this2);\n    _this2.handleTouchSlide = _this2.handleTouchSlide.bind(_this2);\n    _this2.handleSlide = _this2.handleSlide.bind(_this2);\n    _this2.endSlide = _this2.endSlide.bind(_this2);\n    _this2.handleKeydown = _this2.handleKeydown.bind(_this2);\n    _this2.validatePosition = _this2.validatePosition.bind(_this2);\n    _this2.validateValues = _this2.validateValues.bind(_this2);\n    _this2.canMove = _this2.canMove.bind(_this2);\n    _this2.fireChangeEvent = _this2.fireChangeEvent.bind(_this2);\n    _this2.slideTo = _this2.slideTo.bind(_this2);\n    _this2.updateNewValues = _this2.updateNewValues.bind(_this2);\n    _this2.setRef = _this2.setRef.bind(_this2);\n    _this2.invalidatePitStyleCache = _this2.invalidatePitStyleCache.bind(_this2);\n    _this2.pitStyleCache = {};\n    return _this2;\n  }\n\n  _createClass(Rheostat, [{\n    key: 'componentWillReceiveProps',\n    value: function () {\n      function componentWillReceiveProps(nextProps) {\n        var _props = this.props,\n            className = _props.className,\n            disabled = _props.disabled,\n            min = _props.min,\n            max = _props.max,\n            orientation = _props.orientation,\n            pitPoints = _props.pitPoints,\n            algorithm = _props.algorithm;\n        var _state = this.state,\n            values = _state.values,\n            slidingIndex = _state.slidingIndex;\n        var minMaxChanged = nextProps.min !== min || nextProps.max !== max;\n        var valuesChanged = values.length !== nextProps.values.length || values.some(function (value, idx) {\n          return nextProps.values[idx] !== value;\n        });\n        var orientationChanged = nextProps.className !== className || nextProps.orientation !== orientation;\n        var algorithmChanged = nextProps.algorithm !== algorithm;\n        var pitPointsChanged = nextProps.pitPoints !== pitPoints;\n        var willBeDisabled = nextProps.disabled && !disabled;\n\n        if (orientationChanged) {\n          this.setState({\n            className: getClassName(nextProps)\n          });\n        }\n\n        if (minMaxChanged || valuesChanged) this.updateNewValues(nextProps);\n\n        if (minMaxChanged || pitPointsChanged || orientationChanged || algorithmChanged) {\n          this.invalidatePitStyleCache();\n        }\n\n        if (willBeDisabled && slidingIndex !== null) {\n          this.endSlide();\n        }\n      }\n\n      return componentWillReceiveProps;\n    }()\n  }, {\n    key: 'getPublicState',\n    value: function () {\n      function getPublicState() {\n        var _props2 = this.props,\n            min = _props2.min,\n            max = _props2.max;\n        var values = this.state.values;\n        return {\n          max: max,\n          min: min,\n          values: values\n        };\n      }\n\n      return getPublicState;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'getSliderBoundingBox',\n    value: function () {\n      function getSliderBoundingBox() {\n        var rheostat = this.rheostat;\n        var node = rheostat.getDOMNode ? rheostat.getDOMNode() : rheostat;\n        var rect = node.getBoundingClientRect();\n        return {\n          height: rect.height || node.clientHeight,\n          left: rect.left,\n          top: rect.top,\n          width: rect.width || node.clientWidth\n        };\n      }\n\n      return getSliderBoundingBox;\n    }()\n  }, {\n    key: 'getProgressStyle',\n    value: function () {\n      function getProgressStyle(idx) {\n        var orientation = this.props.orientation;\n        var handlePos = this.state.handlePos;\n        var value = handlePos[idx];\n\n        if (idx === 0) {\n          return orientation === 'vertical' ? {\n            height: String(value) + '%',\n            top: 0\n          } : {\n            left: 0,\n            width: String(value) + '%'\n          };\n        }\n\n        var prevValue = handlePos[idx - 1];\n        var diffValue = value - prevValue;\n        return orientation === 'vertical' ? {\n          height: diffValue + '%',\n          top: String(prevValue) + '%'\n        } : {\n          left: String(prevValue) + '%',\n          width: diffValue + '%'\n        };\n      }\n\n      return getProgressStyle;\n    }()\n  }, {\n    key: 'getMinValue',\n    value: function () {\n      function getMinValue(idx) {\n        var min = this.props.min;\n        var values = this.state.values;\n        return values[idx - 1] ? Math.max(min, values[idx - 1]) : min;\n      }\n\n      return getMinValue;\n    }()\n  }, {\n    key: 'getMaxValue',\n    value: function () {\n      function getMaxValue(idx) {\n        var max = this.props.max;\n        var values = this.state.values;\n        return values[idx + 1] ? Math.min(max, values[idx + 1]) : max;\n      }\n\n      return getMaxValue;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'getHandleDimensions',\n    value: function () {\n      function getHandleDimensions(ev, sliderBox) {\n        var handleNode = ev.currentTarget || null;\n        if (!handleNode) return 0;\n        return this.props.orientation === 'vertical' ? handleNode.clientHeight / sliderBox.height * SliderConstants.PERCENT_FULL / 2 : handleNode.clientWidth / sliderBox.width * SliderConstants.PERCENT_FULL / 2;\n      }\n\n      return getHandleDimensions;\n    }()\n  }, {\n    key: 'getClosestSnapPoint',\n    value: function () {\n      function getClosestSnapPoint(value) {\n        var snapPoints = this.props.snapPoints;\n        if (!snapPoints.length) return value;\n        return snapPoints.reduce(function (snapTo, snap) {\n          return Math.abs(snapTo - value) < Math.abs(snap - value) ? snapTo : snap;\n        });\n      }\n\n      return getClosestSnapPoint;\n    }()\n  }, {\n    key: 'getSnapPosition',\n    value: function () {\n      function getSnapPosition(positionPercent) {\n        var _props3 = this.props,\n            algorithm = _props3.algorithm,\n            max = _props3.max,\n            min = _props3.min,\n            snap = _props3.snap;\n        if (!snap) return positionPercent;\n        var value = algorithm.getValue(positionPercent, min, max);\n        var snapValue = this.getClosestSnapPoint(value);\n        return algorithm.getPosition(snapValue, min, max);\n      }\n\n      return getSnapPosition;\n    }()\n  }, {\n    key: 'getNextPositionForKey',\n    value: function () {\n      function getNextPositionForKey(idx, keyCode) {\n        var _stepMultiplier;\n\n        var _state2 = this.state,\n            handlePos = _state2.handlePos,\n            values = _state2.values;\n        var _props4 = this.props,\n            algorithm = _props4.algorithm,\n            max = _props4.max,\n            min = _props4.min,\n            snapPoints = _props4.snapPoints,\n            shouldSnap = _props4.snap;\n        var proposedValue = values[idx];\n        var proposedPercentage = handlePos[idx];\n        var originalPercentage = proposedPercentage;\n        var stepValue = 1;\n\n        if (max >= 100) {\n          proposedPercentage = Math.round(proposedPercentage);\n        } else {\n          stepValue = 100 / (max - min);\n        }\n\n        var currentIndex = null;\n\n        if (shouldSnap) {\n          currentIndex = snapPoints.indexOf(this.getClosestSnapPoint(values[idx]));\n        }\n\n        var stepMultiplier = (_stepMultiplier = {}, _defineProperty(_stepMultiplier, SliderConstants.KEYS.LEFT, function (v) {\n          return v * -1;\n        }), _defineProperty(_stepMultiplier, SliderConstants.KEYS.RIGHT, function (v) {\n          return v * 1;\n        }), _defineProperty(_stepMultiplier, SliderConstants.KEYS.UP, function (v) {\n          return v * 1;\n        }), _defineProperty(_stepMultiplier, SliderConstants.KEYS.DOWN, function (v) {\n          return v * -1;\n        }), _defineProperty(_stepMultiplier, SliderConstants.KEYS.PAGE_DOWN, function (v) {\n          return v > 1 ? -v : v * -10;\n        }), _defineProperty(_stepMultiplier, SliderConstants.KEYS.PAGE_UP, function (v) {\n          return v > 1 ? v : v * 10;\n        }), _stepMultiplier);\n\n        if (has.call(stepMultiplier, keyCode)) {\n          proposedPercentage += stepMultiplier[keyCode](stepValue);\n\n          if (shouldSnap) {\n            if (proposedPercentage > originalPercentage) {\n              // move cursor right unless overflow\n              if (currentIndex < snapPoints.length - 1) {\n                proposedValue = snapPoints[currentIndex + 1];\n              } // move cursor left unless there is overflow\n\n            } else if (currentIndex > 0) {\n              proposedValue = snapPoints[currentIndex - 1];\n            }\n          }\n        } else if (keyCode === SliderConstants.KEYS.HOME) {\n          proposedPercentage = SliderConstants.PERCENT_EMPTY;\n\n          if (shouldSnap) {\n            var _snapPoints = _slicedToArray(snapPoints, 1);\n\n            proposedValue = _snapPoints[0];\n          }\n        } else if (keyCode === SliderConstants.KEYS.END) {\n          proposedPercentage = SliderConstants.PERCENT_FULL;\n\n          if (shouldSnap) {\n            proposedValue = snapPoints[snapPoints.length - 1];\n          }\n        } else {\n          return null;\n        }\n\n        return shouldSnap ? algorithm.getPosition(proposedValue, min, max) : proposedPercentage;\n      }\n\n      return getNextPositionForKey;\n    }()\n  }, {\n    key: 'getNextState',\n    value: function () {\n      function getNextState(idx, proposedPosition) {\n        var handlePos = this.state.handlePos;\n        var _props5 = this.props,\n            max = _props5.max,\n            min = _props5.min,\n            algorithm = _props5.algorithm;\n        var actualPosition = this.validatePosition(idx, proposedPosition);\n        var nextHandlePos = handlePos.map(function (pos, index) {\n          return index === idx ? actualPosition : pos;\n        });\n        return {\n          handlePos: nextHandlePos,\n          values: nextHandlePos.map(function (pos) {\n            return algorithm.getValue(pos, min, max);\n          })\n        };\n      }\n\n      return getNextState;\n    }()\n  }, {\n    key: 'getClosestHandle',\n    value: function () {\n      function getClosestHandle(positionPercent) {\n        var handlePos = this.state.handlePos;\n        return handlePos.reduce(function (closestIdx, node, idx) {\n          var challenger = Math.abs(handlePos[idx] - positionPercent);\n          var current = Math.abs(handlePos[closestIdx] - positionPercent);\n          return challenger < current ? idx : closestIdx;\n        }, 0);\n      }\n\n      return getClosestHandle;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'setStartSlide',\n    value: function () {\n      function setStartSlide(ev\n      /* , x, y */\n      ) {\n        var sliderBox = this.getSliderBoundingBox();\n        this.setState({\n          handleDimensions: this.getHandleDimensions(ev, sliderBox),\n          // mousePos: { x, y },\n          sliderBox: sliderBox,\n          slidingIndex: getHandleFor(ev)\n        });\n      }\n\n      return setStartSlide;\n    }()\n  }, {\n    key: 'setRef',\n    value: function () {\n      function setRef(ref) {\n        this.rheostat = ref;\n      }\n\n      return setRef;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'startMouseSlide',\n    value: function () {\n      function startMouseSlide(ev) {\n        this.setStartSlide(ev, ev.clientX, ev.clientY);\n\n        if (typeof document.addEventListener === 'function') {\n          document.addEventListener('mousemove', this.handleMouseSlide, false);\n          document.addEventListener('mouseup', this.endSlide, false);\n        } else {\n          document.attachEvent('onmousemove', this.handleMouseSlide);\n          document.attachEvent('onmouseup', this.endSlide);\n        }\n\n        killEvent(ev);\n      }\n\n      return startMouseSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'startTouchSlide',\n    value: function () {\n      function startTouchSlide(ev) {\n        var onSliderDragStart = this.props.onSliderDragStart;\n        if (ev.changedTouches.length > 1) return;\n        var touch = ev.changedTouches[0];\n        this.setStartSlide(ev, touch.clientX, touch.clientY);\n        document.addEventListener('touchmove', this.handleTouchSlide, false);\n        document.addEventListener('touchend', this.endSlide, false);\n        if (onSliderDragStart) onSliderDragStart();\n        killEvent(ev);\n      }\n\n      return startTouchSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'handleMouseSlide',\n    value: function () {\n      function handleMouseSlide(ev) {\n        var slidingIndex = this.state.slidingIndex;\n        if (slidingIndex === null) return;\n        this.handleSlide(ev.clientX, ev.clientY);\n        killEvent(ev);\n      }\n\n      return handleMouseSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'handleTouchSlide',\n    value: function () {\n      function handleTouchSlide(ev) {\n        var slidingIndex = this.state.slidingIndex;\n        if (slidingIndex === null) return;\n\n        if (ev.changedTouches.length > 1) {\n          this.endSlide();\n          return;\n        }\n\n        var touch = ev.changedTouches[0];\n        this.handleSlide(touch.clientX, touch.clientY);\n        killEvent(ev);\n      }\n\n      return handleTouchSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'handleSlide',\n    value: function () {\n      function handleSlide(x, y) {\n        var _props6 = this.props,\n            orientation = _props6.orientation,\n            onSliderDragMove = _props6.onSliderDragMove;\n        var _state3 = this.state,\n            idx = _state3.slidingIndex,\n            sliderBox = _state3.sliderBox;\n        var positionPercent = orientation === 'vertical' ? (y - sliderBox.top) / sliderBox.height * SliderConstants.PERCENT_FULL : (x - sliderBox.left) / sliderBox.width * SliderConstants.PERCENT_FULL;\n        this.slideTo(idx, positionPercent);\n\n        if (this.canMove(idx, positionPercent)) {\n          if (onSliderDragMove) onSliderDragMove();\n        }\n      }\n\n      return handleSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'endSlide',\n    value: function () {\n      function endSlide() {\n        var _this3 = this;\n\n        var _props7 = this.props,\n            onSliderDragEnd = _props7.onSliderDragEnd,\n            snap = _props7.snap;\n        var _state4 = this.state,\n            slidingIndex = _state4.slidingIndex,\n            handlePos = _state4.handlePos;\n        this.setState({\n          slidingIndex: null\n        });\n\n        if (typeof document.removeEventListener === 'function') {\n          document.removeEventListener('mouseup', this.endSlide, false);\n          document.removeEventListener('touchend', this.endSlide, false);\n          document.removeEventListener('touchmove', this.handleTouchSlide, false);\n          document.removeEventListener('mousemove', this.handleMouseSlide, false);\n        } else {\n          document.detachEvent('onmousemove', this.handleMouseSlide);\n          document.detachEvent('onmouseup', this.endSlide);\n        }\n\n        if (onSliderDragEnd) onSliderDragEnd();\n\n        if (snap) {\n          var positionPercent = this.getSnapPosition(handlePos[slidingIndex]);\n          this.slideTo(slidingIndex, positionPercent, function () {\n            return _this3.fireChangeEvent();\n          });\n        } else {\n          this.fireChangeEvent();\n        }\n      }\n\n      return endSlide;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'handleClick',\n    value: function () {\n      function handleClick(ev) {\n        var _this4 = this;\n\n        if (ev.target.getAttribute('data-handle-key')) {\n          return;\n        }\n\n        var _props8 = this.props,\n            orientation = _props8.orientation,\n            onClick = _props8.onClick; // Calculate the position of the slider on the page so we can determine\n        // the position where you click in relativity.\n\n        var sliderBox = this.getSliderBoundingBox();\n        var positionDecimal = orientation === 'vertical' ? (ev.clientY - sliderBox.top) / sliderBox.height : (ev.clientX - sliderBox.left) / sliderBox.width;\n        var positionPercent = positionDecimal * SliderConstants.PERCENT_FULL;\n        var handleId = this.getClosestHandle(positionPercent);\n        var validPositionPercent = this.getSnapPosition(positionPercent); // Move the handle there\n\n        this.slideTo(handleId, validPositionPercent, function () {\n          return _this4.fireChangeEvent();\n        });\n        if (onClick) onClick();\n      }\n\n      return handleClick;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'handleKeydown',\n    value: function () {\n      function handleKeydown(ev) {\n        var _this5 = this;\n\n        var idx = getHandleFor(ev);\n\n        if (ev.keyCode === SliderConstants.KEYS.ESC) {\n          ev.currentTarget.blur();\n          return;\n        }\n\n        var proposedPercentage = this.getNextPositionForKey(idx, ev.keyCode);\n        if (proposedPercentage === null) return;\n\n        if (this.canMove(idx, proposedPercentage)) {\n          this.slideTo(idx, proposedPercentage, function () {\n            return _this5.fireChangeEvent();\n          });\n          var onKeyPress = this.props.onKeyPress;\n          if (onKeyPress) onKeyPress();\n        }\n\n        killEvent(ev);\n      }\n\n      return handleKeydown;\n    }() // Apply user adjustments to position\n\n  }, {\n    key: 'userAdjustPosition',\n    value: function () {\n      function userAdjustPosition(idx, proposedPosition) {\n        var getNextHandlePosition = this.props.getNextHandlePosition;\n        var nextPosition = proposedPosition;\n\n        if (getNextHandlePosition) {\n          nextPosition = parseFloat(getNextHandlePosition(idx, proposedPosition));\n\n          if (Number.isNaN(nextPosition) || nextPosition < SliderConstants.PERCENT_EMPTY || nextPosition > SliderConstants.PERCENT_FULL) {\n            throw new TypeError('getNextHandlePosition returned invalid position. Valid positions are floats between 0 and 100');\n          }\n        }\n\n        return nextPosition;\n      }\n\n      return userAdjustPosition;\n    }() // Make sure the proposed position respects the bounds and\n    // does not collide with other handles too much.\n\n  }, {\n    key: 'validatePosition',\n    value: function () {\n      function validatePosition(idx, proposedPosition) {\n        var _state5 = this.state,\n            handlePos = _state5.handlePos,\n            handleDimensions = _state5.handleDimensions;\n        var nextPosition = this.userAdjustPosition(idx, proposedPosition);\n        return Math.max(Math.min(nextPosition, handlePos[idx + 1] !== undefined ? handlePos[idx + 1] - handleDimensions : SliderConstants.PERCENT_FULL // 100% is the highest value\n        ), handlePos[idx - 1] !== undefined ? handlePos[idx - 1] + handleDimensions : SliderConstants.PERCENT_EMPTY // 0% is the lowest value\n        );\n      }\n\n      return validatePosition;\n    }()\n  }, {\n    key: 'validateValues',\n    value: function () {\n      function validateValues(proposedValues, props) {\n        var _ref = props || this.props,\n            max = _ref.max,\n            min = _ref.min;\n\n        return proposedValues.map(function (value, idx, values) {\n          var realValue = Math.max(Math.min(value, max), min);\n\n          if (values.length && realValue < values[idx - 1]) {\n            return values[idx - 1];\n          }\n\n          return realValue;\n        });\n      }\n\n      return validateValues;\n    }() // Can we move the slider to the given position?\n\n  }, {\n    key: 'canMove',\n    value: function () {\n      function canMove(idx, proposedPosition) {\n        var _state6 = this.state,\n            handlePos = _state6.handlePos,\n            handleDimensions = _state6.handleDimensions;\n        if (proposedPosition < SliderConstants.PERCENT_EMPTY) return false;\n        if (proposedPosition > SliderConstants.PERCENT_FULL) return false;\n        var nextHandlePosition = handlePos[idx + 1] !== undefined ? handlePos[idx + 1] - handleDimensions : Infinity;\n        if (proposedPosition > nextHandlePosition) return false;\n        var prevHandlePosition = handlePos[idx - 1] !== undefined ? handlePos[idx - 1] + handleDimensions : -Infinity;\n        if (proposedPosition < prevHandlePosition) return false;\n        return true;\n      }\n\n      return canMove;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'fireChangeEvent',\n    value: function () {\n      function fireChangeEvent() {\n        var onChange = this.props.onChange;\n        if (onChange) onChange(this.getPublicState());\n      }\n\n      return fireChangeEvent;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'slideTo',\n    value: function () {\n      function slideTo(idx, proposedPosition, onAfterSet) {\n        var _this6 = this;\n\n        var nextState = this.getNextState(idx, proposedPosition);\n        this.setState(nextState, function () {\n          var onValuesUpdated = _this6.props.onValuesUpdated;\n          if (onValuesUpdated) onValuesUpdated(_this6.getPublicState());\n          if (onAfterSet) onAfterSet();\n        });\n      }\n\n      return slideTo;\n    }() // istanbul ignore next\n\n  }, {\n    key: 'updateNewValues',\n    value: function () {\n      function updateNewValues(nextProps) {\n        var _this7 = this;\n\n        var slidingIndex = this.state.slidingIndex; // Don't update while the slider is sliding\n\n        if (slidingIndex !== null) {\n          return;\n        }\n\n        var max = nextProps.max,\n            min = nextProps.min,\n            values = nextProps.values;\n        var algorithm = this.props.algorithm;\n        var nextValues = this.validateValues(values, nextProps);\n        this.setState({\n          handlePos: nextValues.map(function (value) {\n            return algorithm.getPosition(value, min, max);\n          }),\n          values: nextValues\n        }, function () {\n          return _this7.fireChangeEvent();\n        });\n      }\n\n      return updateNewValues;\n    }()\n  }, {\n    key: 'invalidatePitStyleCache',\n    value: function () {\n      function invalidatePitStyleCache() {\n        this.pitStyleCache = {};\n      }\n\n      return invalidatePitStyleCache;\n    }()\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var _this8 = this;\n\n        var _props9 = this.props,\n            algorithm = _props9.algorithm,\n            children = _props9.children,\n            disabled = _props9.disabled,\n            Handle = _props9.handle,\n            max = _props9.max,\n            min = _props9.min,\n            orientation = _props9.orientation,\n            PitComponent = _props9.pitComponent,\n            pitPoints = _props9.pitPoints,\n            ProgressBar = _props9.progressBar;\n        var _state7 = this.state,\n            className = _state7.className,\n            handlePos = _state7.handlePos,\n            values = _state7.values;\n        return (// eslint-disable-next-line jsx-a11y/click-events-have-key-events\n          _react2['default'].createElement('div', {\n            className: className,\n            ref: this.setRef,\n            onClick: !disabled ? this.handleClick : undefined,\n            style: {\n              position: 'relative'\n            }\n          }, _react2['default'].createElement('div', {\n            className: 'rheostat-background'\n          }), handlePos.map(function (pos, idx) {\n            var handleStyle = orientation === 'vertical' ? {\n              top: String(pos) + '%',\n              position: 'absolute'\n            } : {\n              left: String(pos) + '%',\n              position: 'absolute'\n            };\n            return _react2['default'].createElement(Handle, {\n              'aria-valuemax': _this8.getMaxValue(idx),\n              'aria-valuemin': _this8.getMinValue(idx),\n              'aria-valuenow': values[idx],\n              'aria-disabled': disabled,\n              'data-handle-key': idx,\n              className: 'rheostat-handle',\n              key: 'handle-' + String(idx),\n              onClick: _this8.killEvent,\n              onKeyDown: !disabled ? _this8.handleKeydown : undefined,\n              onMouseDown: !disabled ? _this8.startMouseSlide : undefined,\n              onTouchStart: !disabled ? _this8.startTouchSlide : undefined,\n              role: 'slider',\n              style: handleStyle,\n              tabIndex: 0\n            });\n          }), handlePos.map(function (node, idx, arr) {\n            if (idx === 0 && arr.length > 1) {\n              return null;\n            }\n\n            return _react2['default'].createElement(ProgressBar, {\n              className: 'rheostat-progress',\n              key: 'progress-bar-' + String(idx),\n              style: _this8.getProgressStyle(idx)\n            });\n          }), PitComponent && pitPoints.map(function (n) {\n            var pitStyle = _this8.pitStyleCache[n];\n\n            if (!pitStyle) {\n              var pos = algorithm.getPosition(n, min, max);\n              pitStyle = orientation === 'vertical' ? {\n                top: String(pos) + '%',\n                position: 'absolute'\n              } : {\n                left: String(pos) + '%',\n                position: 'absolute'\n              };\n              _this8.pitStyleCache[n] = pitStyle;\n            }\n\n            return _react2['default'].createElement(PitComponent, {\n              key: 'pit-' + String(n),\n              style: pitStyle\n            }, n);\n          }), children)\n        );\n      }\n\n      return render;\n    }()\n  }]);\n\n  return Rheostat;\n}(_react2['default'].Component);\n\nRheostat.propTypes = propTypes;\nRheostat.defaultProps = defaultProps;\nexports['default'] = Rheostat;","map":null,"metadata":{},"sourceType":"script"}