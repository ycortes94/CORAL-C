{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _Dropdown = require('../shared/Dropdown');\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar SingleDropdownRange = function (_Component) {\n  _inherits(SingleDropdownRange, _Component);\n\n  function SingleDropdownRange(props) {\n    _classCallCheck(this, SingleDropdownRange);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentValue: null\n    };\n    _this.type = 'range';\n    _this.locked = false;\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  SingleDropdownRange.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.props.componentId);\n    this.setReact(this.props);\n\n    if (this.props.selectedValue) {\n      this.setValue(this.props.selectedValue, true);\n    } else if (this.props.defaultSelected) {\n      this.setValue(this.props.defaultSelected, true);\n    }\n  };\n\n  SingleDropdownRange.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      return _this2.setReact(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.dataField, nextProps.dataField, function () {\n      _this2.updateQuery(_this2.state.currentValue, nextProps);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.setValue(nextProps.defaultSelected, true);\n    } else if (!(0, _helper.isEqual)(this.state.currentValue, nextProps.selectedValue)) {\n      this.setValue(nextProps.selectedValue, true);\n    }\n  };\n\n  SingleDropdownRange.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  SingleDropdownRange.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  }; // parses range label to get start and end\n\n\n  SingleDropdownRange.prototype.render = function render() {\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement(_Dropdown2.default, {\n      innerClass: this.props.innerClass,\n      items: this.props.data,\n      onChange: this.setValue,\n      selectedItem: this.state.currentValue,\n      placeholder: this.props.placeholder,\n      keyField: 'label',\n      returnsObject: true,\n      themePreset: this.props.themePreset\n    }));\n  };\n\n  return SingleDropdownRange;\n}(_react.Component);\n\nSingleDropdownRange.parseValue = function (value, props) {\n  return props.data.find(function (item) {\n    return item.label === value;\n  }) || null;\n};\n\nSingleDropdownRange.defaultQuery = function (value, props) {\n  if (value) {\n    var _range;\n\n    return {\n      range: (_range = {}, _range[props.dataField] = {\n        gte: value.start,\n        lte: value.end,\n        boost: 2.0\n      }, _range)\n    };\n  }\n\n  return null;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this3.props; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this3.locked) {\n      return;\n    }\n\n    _this3.locked = true;\n    var currentValue = value;\n\n    if (isDefaultValue) {\n      currentValue = props.data.find(function (item) {\n        return item.label === value;\n      }) || null;\n      currentValue = SingleDropdownRange.parseValue(value, props);\n    }\n\n    var performUpdate = function performUpdate() {\n      _this3.setState({\n        currentValue: currentValue\n      }, function () {\n        _this3.updateQuery(currentValue, props);\n\n        _this3.locked = false;\n        if (props.onValueChange) props.onValueChange(currentValue);\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, currentValue, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var query = props.customQuery || SingleDropdownRange.defaultQuery;\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query(value, props),\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'SINGLEDROPDOWNRANGE'\n    });\n  };\n};\n\nSingleDropdownRange.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  data: _types2.default.data,\n  dataField: _types2.default.stringRequired,\n  defaultSelected: _types2.default.string,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  react: _types2.default.react,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  title: _types2.default.title,\n  themePreset: _types2.default.themePreset,\n  URLParams: _types2.default.bool\n};\nSingleDropdownRange.defaultProps = {\n  className: null,\n  placeholder: 'Select a value',\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(SingleDropdownRange);","map":null,"metadata":{},"sourceType":"script"}