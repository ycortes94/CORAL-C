{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar flatten = function flatten(arr) {\n  return arr.reduce(function (flat, toFlatten) {\n    return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n  }, []);\n};\n\nvar extractSuggestion = function extractSuggestion(val) {\n  switch (typeof val) {\n    case 'string':\n      return val.toLowerCase();\n\n    case 'object':\n      if (Array.isArray(val)) {\n        return flatten(val);\n      }\n\n      return null;\n\n    default:\n      return val;\n  }\n};\n\nvar getSuggestions = function getSuggestions(fields, suggestions, currentValue) {\n  var suggestionProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var suggestionsList = [];\n  var labelsList = [];\n\n  var populateSuggestionsList = function populateSuggestionsList(val, source) {\n    var isWordMatch = currentValue.trim().split(' ').some(function (term) {\n      return String(val).toLowerCase().includes(term);\n    });\n\n    if (isWordMatch && !labelsList.includes(val)) {\n      var defaultOption = {\n        label: val,\n        value: val,\n        source: source\n      };\n      var additionalKeys = {};\n\n      if (Array.isArray(suggestionProperties) && suggestionProperties.length > 0) {\n        suggestionProperties.forEach(function (prop) {\n          if (source.hasOwnProperty(prop)) {\n            additionalKeys = _extends({}, additionalKeys, _defineProperty({}, prop, source[prop]));\n          }\n        });\n      }\n\n      var option = _extends({}, defaultOption, additionalKeys);\n\n      labelsList = [].concat(_toConsumableArray(labelsList), [val]);\n      suggestionsList = [].concat(_toConsumableArray(suggestionsList), [option]);\n    }\n  };\n\n  var parseField = function parseField(source, field) {\n    if (typeof source === 'object') {\n      var fieldNodes = field.split('.');\n      var label = source[fieldNodes[0]];\n\n      if (label) {\n        if (fieldNodes.length > 1) {\n          var children = field.substring(fieldNodes[0].length + 1);\n\n          if (Array.isArray(label)) {\n            label.forEach(function (arrayItem) {\n              parseField(arrayItem, children);\n            });\n          } else {\n            parseField(label, children);\n          }\n        } else {\n          var val = extractSuggestion(label);\n\n          if (val) {\n            if (Array.isArray(val)) {\n              val.forEach(function (suggestion) {\n                return populateSuggestionsList(suggestion, source);\n              });\n            } else {\n              populateSuggestionsList(val, source);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  suggestions.forEach(function (item) {\n    fields.forEach(function (field) {\n      parseField(item._source, field);\n    });\n  });\n  return suggestionsList;\n};\n\nexports.default = getSuggestions;","map":null,"metadata":{},"sourceType":"script"}