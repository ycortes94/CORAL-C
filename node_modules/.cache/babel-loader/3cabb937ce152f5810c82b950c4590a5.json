{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _downshift = require('downshift');\n\nvar _downshift2 = _interopRequireDefault(_downshift);\n\nvar _emotionTheming = require('emotion-theming');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _Select = require('../../styles/Select');\n\nvar _Select2 = _interopRequireDefault(_Select);\n\nvar _Chevron = require('../../styles/Chevron');\n\nvar _Chevron2 = _interopRequireDefault(_Chevron);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.toggle = function () {\n      _this.setState({\n        isOpen: !_this.state.isOpen\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        isOpen: false\n      });\n    };\n\n    _this.onChange = function (item) {\n      if (_this.props.returnsObject) {\n        _this.props.onChange(item);\n      } else {\n        _this.props.onChange(item[_this.props.keyField]);\n      }\n\n      if (!_this.props.multi) {\n        _this.setState({\n          isOpen: false\n        });\n      }\n    };\n\n    _this.handleStateChange = function (changes) {\n      var isOpen = changes.isOpen,\n          type = changes.type;\n\n      if (type === _downshift2.default.stateChangeTypes.mouseUp) {\n        _this.setState({\n          isOpen: isOpen\n        });\n      }\n    };\n\n    _this.getBackgroundColor = function (highlighted, selected) {\n      var isDark = _this.props.themePreset === 'dark';\n\n      if (highlighted) {\n        return isDark ? '#555' : '#eee';\n      } else if (selected) {\n        return isDark ? '#686868' : '#fafafa';\n      }\n\n      return isDark ? '#424242' : '#fff';\n    };\n\n    _this.handleInputChange = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        searchTerm: value\n      });\n    };\n\n    _this.renderToString = function (value) {\n      if (Array.isArray(value) && value.length) {\n        var arrayToRender = value.map(function (item) {\n          return _this.renderToString(item);\n        });\n        return arrayToRender.join(', ');\n      } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n        if (value[_this.props.labelField]) {\n          return value[_this.props.labelField];\n        } else if (Object.keys(value).length) {\n          return _this.renderToString(Object.keys(value));\n        }\n\n        return _this.props.placeholder;\n      }\n\n      return value;\n    };\n\n    _this.state = {\n      isOpen: false,\n      searchTerm: ''\n    };\n    return _this;\n  }\n\n  Dropdown.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        items = _props.items,\n        selectedItem = _props.selectedItem,\n        placeholder = _props.placeholder,\n        labelField = _props.labelField,\n        keyField = _props.keyField,\n        themePreset = _props.themePreset,\n        theme = _props.theme,\n        renderListItem = _props.renderListItem,\n        transformData = _props.transformData,\n        footer = _props.footer;\n    var itemsToRender = items;\n\n    if (transformData) {\n      itemsToRender = transformData(itemsToRender);\n    }\n\n    return _react2.default.createElement(_downshift2.default, {\n      selectedItem: selectedItem,\n      onChange: this.onChange,\n      onOuterClick: this.close,\n      onStateChange: this.handleStateChange,\n      isOpen: this.state.isOpen,\n      itemToString: function itemToString(i) {\n        return i && i[_this2.props.labelField];\n      },\n      render: function render(_ref) {\n        var getButtonProps = _ref.getButtonProps,\n            getItemProps = _ref.getItemProps,\n            isOpen = _ref.isOpen,\n            highlightedIndex = _ref.highlightedIndex;\n        return _react2.default.createElement('div', {\n          className: _Input.suggestionsContainer\n        }, _react2.default.createElement(_Select2.default, _extends({}, getButtonProps(), {\n          className: (0, _helper.getClassName)(_this2.props.innerClass, 'select') || null,\n          onClick: _this2.toggle,\n          title: selectedItem ? _this2.renderToString(selectedItem) : placeholder,\n          small: _this2.props.small,\n          themePreset: _this2.props.themePreset\n        }), _react2.default.createElement('div', null, selectedItem ? _this2.renderToString(selectedItem) : placeholder), _react2.default.createElement(_Chevron2.default, {\n          open: isOpen\n        })), isOpen && itemsToRender.length ? _react2.default.createElement('ul', {\n          className: (0, _Input.suggestions)(themePreset, theme) + ' ' + (_this2.props.small ? 'small' : '') + ' ' + (0, _helper.getClassName)(_this2.props.innerClass, 'list')\n        }, _this2.props.showSearch ? _react2.default.createElement(_Input2.default, {\n          id: _this2.props.componentId + '-input',\n          style: {\n            border: 0,\n            borderBottom: '1px solid #ddd'\n          },\n          showIcon: false,\n          className: (0, _helper.getClassName)(_this2.props.innerClass, 'input'),\n          placeholder: 'Type here to search...',\n          value: _this2.state.searchTerm,\n          onChange: _this2.handleInputChange,\n          themePreset: themePreset\n        }) : null, itemsToRender.filter(function (item) {\n          if (String(item[labelField]).length) {\n            if (_this2.props.showSearch && _this2.state.searchTerm) {\n              return String(item[labelField]).toLowerCase().includes(_this2.state.searchTerm.toLowerCase());\n            }\n\n            return true;\n          }\n\n          return false;\n        }).map(function (item, index) {\n          var selected = _this2.props.multi && ( // MultiDropdownList\n          selectedItem && !!selectedItem[item[keyField]] || // MultiDropdownRange\n          Array.isArray(selectedItem) && selectedItem.find(function (value) {\n            return value[labelField] === item[labelField];\n          }));\n          if (!_this2.props.multi) selected = item.key === selectedItem;\n          return _react2.default.createElement('li', _extends({}, getItemProps({\n            item: item\n          }), {\n            key: item[keyField],\n            className: '' + (selected ? 'active' : ''),\n            style: {\n              backgroundColor: _this2.getBackgroundColor(highlightedIndex === index, selected)\n            }\n          }), renderListItem ? renderListItem(item[labelField], item.doc_count) : _react2.default.createElement('div', null, typeof item[labelField] === 'string' ? _react2.default.createElement('span', {\n            dangerouslySetInnerHTML: {\n              __html: item[labelField]\n            }\n          }) : item[labelField], _this2.props.showCount && item.doc_count && _react2.default.createElement('span', {\n            className: (0, _helper.getClassName)(_this2.props.innerClass, 'count') || null\n          }, '\\xA0(', item.doc_count, ')')), selected && _this2.props.multi ? _react2.default.createElement(_Select.Tick, {\n            className: (0, _helper.getClassName)(_this2.props.innerClass, 'icon') || null\n          }) : null);\n        }), footer) : null);\n      }\n    });\n  };\n\n  return Dropdown;\n}(_react.Component);\n\nDropdown.defaultProps = {\n  keyField: 'key',\n  labelField: 'label',\n  small: false\n};\nDropdown.propTypes = {\n  innerClass: _types2.default.style,\n  items: _types2.default.data,\n  keyField: _types2.default.string,\n  labelField: _types2.default.string,\n  multi: _types2.default.bool,\n  onChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  returnsObject: _types2.default.bool,\n  renderListItem: _types2.default.func,\n  transformData: _types2.default.func,\n  selectedItem: _types2.default.selectedValue,\n  showCount: _types2.default.bool,\n  single: _types2.default.bool,\n  small: _types2.default.bool,\n  theme: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  showSearch: _types2.default.bool\n};\nexports.default = (0, _emotionTheming.withTheme)(Dropdown);","map":null,"metadata":{},"sourceType":"script"}