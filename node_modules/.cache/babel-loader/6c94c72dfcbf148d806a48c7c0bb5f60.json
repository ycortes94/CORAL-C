{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _downshift = require('downshift');\n\nvar _downshift2 = _interopRequireDefault(_downshift);\n\nvar _emotionTheming = require('emotion-theming');\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Title = require('@appbaseio/reactivesearch/lib/styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Input = require('@appbaseio/reactivesearch/lib/styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _InputIcon = require('@appbaseio/reactivesearch/lib/styles/InputIcon');\n\nvar _InputIcon2 = _interopRequireDefault(_InputIcon);\n\nvar _Container = require('@appbaseio/reactivesearch/lib/styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _SearchSvg = require('@appbaseio/reactivesearch/lib/components/shared/SearchSvg');\n\nvar _SearchSvg2 = _interopRequireDefault(_SearchSvg);\n\nvar _Dropdown = require('@appbaseio/reactivesearch/lib/components/shared/Dropdown');\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nvar _utils = require('@appbaseio/reactivesearch/lib/utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar GeoDistanceDropdown = function (_Component) {\n  _inherits(GeoDistanceDropdown, _Component);\n\n  function GeoDistanceDropdown(props) {\n    _classCallCheck(this, GeoDistanceDropdown);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentLocation: null,\n      currentDistance: 0,\n      userLocation: null,\n      suggestions: [],\n      isOpen: false\n    };\n    _this.type = 'geo_distance';\n    _this.locked = false;\n    _this.coordinates = null;\n    _this.autocompleteService = null;\n\n    if (props.autoLocation) {\n      _this.getUserLocation();\n    }\n\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  GeoDistanceDropdown.prototype.componentWillMount = function componentWillMount() {\n    var _this2 = this;\n\n    this.props.addComponent(this.props.componentId);\n    this.setReact(this.props);\n\n    if (this.props.selectedValue) {\n      this.setState({\n        currentLocation: this.props.selectedValue.location\n      });\n      this.getCoordinates(this.props.selectedValue.location, function () {\n        var selected = _this2.props.data.find(function (item) {\n          return item.label === _this2.props.selectedValue.label;\n        });\n\n        _this2.setDistance(selected.distance);\n      });\n    } else if (this.props.defaultSelected) {\n      this.setState({\n        currentLocation: this.props.defaultSelected.location\n      });\n      this.getCoordinates(this.props.defaultSelected.location, function () {\n        var selected = _this2.props.data.find(function (item) {\n          return item.label === _this2.props.defaultSelected.label;\n        });\n\n        _this2.setDistance(selected.distance);\n      });\n    }\n  };\n\n  GeoDistanceDropdown.prototype.componentDidMount = function componentDidMount() {\n    this.autocompleteService = new window.google.maps.places.AutocompleteService();\n  };\n\n  GeoDistanceDropdown.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this3 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      return _this3.setReact(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.dataField, nextProps.dataField, function () {\n      _this3.updateQuery(_this3.state.currentDistance, nextProps);\n    });\n\n    if (nextProps.defaultSelected && nextProps.defaultSelected.label && nextProps.defaultSelected.location && !(0, _helper.isEqual)(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.setValues(nextProps.defaultSelected, nextProps);\n    } else if (nextProps.selectedValue && nextProps.selectedValue.label && nextProps.selectedValue.location && !(0, _helper.isEqual)(this.state.currentLocation, nextProps.selectedValue.location)) {\n      this.setValues(nextProps.selectedValue, nextProps);\n    } else if (!(0, _helper.isEqual)(this.props.selectedValue, nextProps.selectedValue) && !nextProps.selectedValue) {\n      this.setState({\n        currentLocation: null,\n        currentDistance: null\n      }, function () {\n        _this3.updateQuery(null);\n      });\n    }\n  };\n\n  GeoDistanceDropdown.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  GeoDistanceDropdown.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  };\n\n  GeoDistanceDropdown.prototype.getUserLocation = function getUserLocation() {\n    var _this4 = this;\n\n    navigator.geolocation.getCurrentPosition(function (location) {\n      var coordinates = location.coords.latitude + ', ' + location.coords.longitude;\n      fetch('https://maps.googleapis.com/maps/api/geocode/json?key=' + _this4.props.mapKey + '&v=3.31&latlng=' + coordinates).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (Array.isArray(res.results) && res.results.length) {\n          var userLocation = res.results[0].formatted_address;\n\n          _this4.setState({\n            userLocation: userLocation\n          });\n        }\n      }).catch(function (e) {\n        console.error(e);\n      });\n    });\n  };\n\n  GeoDistanceDropdown.prototype.getCoordinates = function getCoordinates(value, cb) {\n    var _this5 = this;\n\n    if (value) {\n      fetch('https://maps.googleapis.com/maps/api/geocode/json?key=' + this.props.mapKey + '&v=3.31&address=' + value).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (Array.isArray(res.results) && res.results.length) {\n          var location = res.results[0].geometry.location;\n          _this5.coordinates = location.lat + ', ' + location.lng;\n        }\n      }).then(function () {\n        if (cb) cb();\n      }).catch(function (e) {\n        console.error(e);\n      });\n    }\n  };\n\n  GeoDistanceDropdown.prototype.render = function render() {\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.renderSearchBox(), _react2.default.createElement(_Dropdown2.default, {\n      innerClass: this.props.innerClass,\n      items: this.props.data,\n      onChange: this.onDistanceChange,\n      selectedItem: this.getSelectedLabel(this.state.currentDistance),\n      placeholder: 'Select distance',\n      keyField: 'label',\n      returnsObject: true,\n      themePreset: this.props.themePreset\n    }));\n  };\n\n  return GeoDistanceDropdown;\n}(_react.Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this6 = this;\n\n  this.setValues = function (selected, props) {\n    _this6.setState({\n      currentLocation: selected.location\n    });\n\n    _this6.getCoordinates(selected.location, function () {\n      var selectedDistance = props.data.find(function (item) {\n        return item.label === selected.label;\n      });\n\n      _this6.setDistance(selectedDistance.distance);\n    });\n  };\n\n  this.defaultQuery = function (coordinates, distance, props) {\n    if (coordinates && distance) {\n      var _this6$type, _ref;\n\n      return _ref = {}, _ref[_this6.type] = (_this6$type = {\n        distance: '' + distance + props.unit\n      }, _this6$type[props.dataField] = coordinates, _this6$type), _ref;\n    }\n\n    return null;\n  };\n\n  this.getSelectedLabel = function (distance) {\n    return _this6.props.data.find(function (item) {\n      return item.distance === distance;\n    });\n  };\n\n  this.setLocation = function (currentValue) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this6.locked) {\n      return;\n    }\n\n    _this6.locked = true;\n\n    var performUpdate = function performUpdate() {\n      _this6.setState({\n        currentLocation: currentValue.value,\n        isOpen: false\n      }, function () {\n        _this6.getCoordinates(currentValue.value, function () {\n          if (_this6.state.currentDistance) {\n            _this6.updateQuery(_this6.state.currentDistance);\n\n            if (props.onValueChange) {\n              props.onValueChange({\n                label: _this6.getSelectedLabel(_this6.state.currentDistance),\n                location: currentValue.value\n              });\n            }\n          }\n\n          _this6.locked = false;\n        });\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, {\n      label: _this6.getSelectedLabel(_this6.state.currentDistance),\n      location: currentValue.value\n    }, props.beforeValueChange, performUpdate);\n  };\n\n  this.setDistance = function (currentDistance) {\n    _this6.setState({\n      currentDistance: currentDistance\n    }, function () {\n      _this6.updateQuery(currentDistance, _this6.props);\n    });\n  };\n\n  this.updateQuery = function (distance) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props;\n    var query = props.customQuery || _this6.defaultQuery;\n\n    var selectedDistance = _this6.getSelectedLabel(distance);\n\n    var value = null;\n\n    if (selectedDistance) {\n      value = {\n        label: selectedDistance.label,\n        location: _this6.state.currentLocation\n      };\n    }\n\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query(_this6.coordinates, distance, props),\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams\n    });\n  };\n\n  this.renderIcon = function () {\n    if (_this6.props.showIcon) {\n      return _this6.props.icon || _react2.default.createElement(_SearchSvg2.default, null);\n    }\n\n    return null;\n  };\n\n  this.onDistanceChange = function (value) {\n    _this6.setDistance(value.distance);\n  };\n\n  this.onInputChange = function (e) {\n    var value = e.target.value;\n\n    _this6.setState({\n      currentLocation: value\n    });\n\n    if (value.trim()) {\n      if (!_this6.autocompleteService) {\n        _this6.autocompleteService = new window.google.maps.places.AutocompleteService();\n      }\n\n      var restrictedCountries = _this6.props.countries || [];\n\n      _this6.autocompleteService.getPlacePredictions({\n        input: value,\n        componentRestrictions: {\n          country: restrictedCountries\n        }\n      }, function (res) {\n        var suggestionsList = res && res.map(function (place) {\n          return {\n            label: place.description,\n            value: place.description\n          };\n        }) || [];\n\n        _this6.setState({\n          suggestions: suggestionsList\n        });\n      });\n    } else {\n      _this6.setState({\n        suggestions: []\n      });\n    }\n  };\n\n  this.handleFocus = function (event) {\n    _this6.setState({\n      isOpen: true\n    });\n\n    if (_this6.props.onFocus) {\n      _this6.props.onFocus(event);\n    }\n  };\n\n  this.handleOuterClick = function () {\n    _this6.setLocation({\n      value: _this6.state.currentLocation\n    });\n  };\n\n  this.handleStateChange = function (changes) {\n    var isOpen = changes.isOpen,\n        type = changes.type;\n\n    if (type === _downshift2.default.stateChangeTypes.mouseUp) {\n      _this6.setState({\n        isOpen: isOpen\n      });\n    }\n  };\n\n  this.renderSearchBox = function () {\n    var suggestionsList = [].concat(_this6.state.suggestions);\n    var _props = _this6.props,\n        theme = _props.theme,\n        themePreset = _props.themePreset;\n\n    if (_this6.state.userLocation) {\n      suggestionsList = [{\n        label: 'Use my current location',\n        value: _this6.state.userLocation\n      }].concat(_this6.state.suggestions);\n    }\n\n    return _react2.default.createElement(_downshift2.default, {\n      onChange: _this6.setLocation,\n      onOuterClick: _this6.handleOuterClick,\n      onStateChange: _this6.handleStateChange,\n      isOpen: _this6.state.isOpen,\n      itemToString: function itemToString(i) {\n        return i;\n      },\n      render: function render(_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            getItemProps = _ref2.getItemProps,\n            isOpen = _ref2.isOpen,\n            highlightedIndex = _ref2.highlightedIndex;\n        return _react2.default.createElement('div', {\n          className: _Input.suggestionsContainer\n        }, _react2.default.createElement(_Input2.default, _extends({\n          showIcon: _this6.props.showIcon,\n          iconPosition: _this6.props.iconPosition,\n          innerRef: _this6.props.innerRef\n        }, getInputProps({\n          className: (0, _helper.getClassName)(_this6.props.innerClass, 'input'),\n          placeholder: _this6.props.placeholder,\n          value: _this6.state.currentLocation || '',\n          onChange: _this6.onInputChange,\n          onBlur: _this6.props.onBlur,\n          onFocus: _this6.handleFocus,\n          onKeyPress: _this6.props.onKeyPress,\n          onKeyDown: _this6.handleKeyDown,\n          onKeyUp: _this6.props.onKeyUp\n        }), {\n          themePreset: themePreset\n        })), _react2.default.createElement(_InputIcon2.default, {\n          iconPosition: _this6.props.iconPosition\n        }, _this6.renderIcon()), isOpen && _this6.state.suggestions.length ? _react2.default.createElement('ul', {\n          className: (0, _Input.suggestions)(themePreset, theme) + ' ' + (0, _helper.getClassName)(_this6.props.innerClass, 'list')\n        }, suggestionsList.slice(0, 11).map(function (item, index) {\n          return _react2.default.createElement('li', _extends({}, getItemProps({\n            item: item\n          }), {\n            key: item.label,\n            style: {\n              backgroundColor: highlightedIndex === index ? '#eee' : '#fff'\n            }\n          }), typeof item.label === 'string' ? _react2.default.createElement('div', {\n            className: 'trim',\n            dangerouslySetInnerHTML: {\n              __html: item.label\n            }\n          }) : item.label);\n        })) : null);\n      }\n    });\n  };\n};\n\nGeoDistanceDropdown.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  mapKey: _types2.default.stringRequired,\n  removeComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  setQueryListener: _types2.default.funcRequired,\n  themePreset: _types2.default.themePreset,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  // component props\n  autoLocation: _types2.default.bool,\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  countries: _types2.default.stringArray,\n  customQuery: _types2.default.func,\n  data: _types2.default.data,\n  dataField: _types2.default.stringRequired,\n  defaultSelected: _types2.default.selectedValue,\n  filterLabel: _types2.default.string,\n  icon: _types2.default.children,\n  iconPosition: _types2.default.iconPosition,\n  innerClass: _types2.default.style,\n  innerRef: _types2.default.func,\n  onBlur: _types2.default.func,\n  onFocus: _types2.default.func,\n  onKeyDown: _types2.default.func,\n  onKeyPress: _types2.default.func,\n  onKeyUp: _types2.default.func,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  react: _types2.default.react,\n  showFilter: _types2.default.bool,\n  showIcon: _types2.default.bool,\n  style: _types2.default.style,\n  theme: _types2.default.style,\n  title: _types2.default.title,\n  unit: _types2.default.string,\n  URLParams: _types2.default.bool\n};\nGeoDistanceDropdown.defaultProps = {\n  className: null,\n  placeholder: 'Select a value',\n  showFilter: true,\n  style: {},\n  URLParams: false,\n  countries: [],\n  autoLocation: true,\n  unit: 'mi'\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    mapKey: state.config.mapKey,\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(GeoDistanceDropdown));","map":null,"metadata":{},"sourceType":"script"}