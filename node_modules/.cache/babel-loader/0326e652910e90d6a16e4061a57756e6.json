{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DataController = function (_Component) {\n  _inherits(DataController, _Component);\n\n  function DataController() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, DataController);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.updateQuery = function () {\n      var defaultSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var props = arguments[1];\n      _this.locked = true;\n      var query = props.customQuery || DataController.defaultQuery;\n\n      var performUpdate = function performUpdate() {\n        props.updateQuery({\n          componentId: props.componentId,\n          query: query(defaultSelected, props),\n          value: defaultSelected,\n          label: props.filterLabel,\n          showFilter: props.showFilter,\n          URLParams: props.URLParams\n        });\n        _this.locked = false;\n        if (props.onValueChange) props.onValueChange(defaultSelected);\n      };\n\n      (0, _helper.checkValueChange)(props.componentId, defaultSelected, props.beforeValueChange, performUpdate);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  DataController.prototype.componentDidMount = function componentDidMount() {\n    this.locked = false;\n    this.props.addComponent(this.props.componentId);\n    this.props.setQueryListener(this.props.componentId, this.props.onQueryChange, null);\n\n    if (this.props.defaultSelected) {\n      this.updateQuery(this.props.defaultSelected, this.props);\n    } else {\n      this.updateQuery(null, this.props);\n    }\n  };\n\n  DataController.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (!this.locked) {\n      if (!(0, _helper.isEqual)(this.props.defaultSelected, nextProps.defaultSelected)) {\n        this.updateQuery(nextProps.defaultSelected, nextProps);\n      } else if (!(0, _helper.isEqual)(this.props.selectedValue, nextProps.selectedValue)) {\n        this.updateQuery(nextProps.selectedValue, nextProps);\n      }\n    }\n  };\n\n  DataController.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  DataController.defaultQuery = function defaultQuery() {\n    return {\n      match_all: {}\n    };\n  };\n\n  DataController.prototype.render = function render() {\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.children);\n  };\n\n  return DataController;\n}(_react.Component);\n\nDataController.defaultProps = {\n  className: null,\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\nDataController.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  componentId: _types2.default.stringRequired,\n  beforeValueChange: _types2.default.func,\n  children: _types2.default.children,\n  className: _types2.default.string,\n  customQuery: _types2.default.func,\n  // DataController can accept any defaultSelected depending on the query used\n  defaultSelected: _types2.default.any,\n  // eslint-disable-line\n  filterLabel: _types2.default.string,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  URLParams: _types2.default.bool\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(DataController);","map":null,"metadata":{},"sourceType":"script"}