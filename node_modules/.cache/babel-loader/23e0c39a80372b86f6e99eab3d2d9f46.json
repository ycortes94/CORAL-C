{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _downshift = require('downshift');\n\nvar _downshift2 = _interopRequireDefault(_downshift);\n\nvar _emotionTheming = require('emotion-theming');\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _suggestions = require('@appbaseio/reactivecore/lib/utils/suggestions');\n\nvar _suggestions2 = _interopRequireDefault(_suggestions);\n\nvar _causes = require('@appbaseio/reactivecore/lib/utils/causes');\n\nvar _causes2 = _interopRequireDefault(_causes);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Input = require('../../styles/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _CancelSvg = require('../shared/CancelSvg');\n\nvar _CancelSvg2 = _interopRequireDefault(_CancelSvg);\n\nvar _SearchSvg = require('../shared/SearchSvg');\n\nvar _SearchSvg2 = _interopRequireDefault(_SearchSvg);\n\nvar _InputIcon = require('../../styles/InputIcon');\n\nvar _InputIcon2 = _interopRequireDefault(_InputIcon);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Text = (0, _emotionTheming.withTheme)(function (props) {\n  return _react2.default.createElement('span', {\n    className: 'trim',\n    style: {\n      color: props.primary ? props.theme.colors.primaryColor : props.theme.colors.textColor\n    }\n  }, props.children);\n});\n\nvar CategorySearch = function (_Component) {\n  _inherits(CategorySearch, _Component);\n\n  function CategorySearch(props) {\n    _classCallCheck(this, CategorySearch);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentValue: '',\n      suggestions: [],\n      isOpen: false\n    };\n    _this.internalComponent = props.componentId + '__internal';\n    _this.locked = false;\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  CategorySearch.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.props.componentId, 'CATEGORYSEARCH');\n    this.props.addComponent(this.internalComponent);\n\n    if (this.props.highlight) {\n      var queryOptions = CategorySearch.highlightQuery(this.props) || {};\n      queryOptions.size = 20;\n      this.props.setQueryOptions(this.props.componentId, queryOptions);\n    } else {\n      this.props.setQueryOptions(this.props.componentId, {\n        size: 20\n      });\n    }\n\n    this.setReact(this.props);\n    var aggsQuery = this.getAggsQuery(this.props.categoryField);\n    this.props.setQueryOptions(this.internalComponent, aggsQuery, false);\n\n    if (this.props.selectedValue) {\n      this.setValue(this.props.selectedValue, true);\n    } else if (this.props.defaultSelected) {\n      this.setValue(this.props.defaultSelected, true);\n    }\n  };\n\n  CategorySearch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    (0, _helper.checkSomePropChange)(this.props, nextProps, ['highlight', 'dataField', 'highlightField'], function () {\n      var queryOptions = CategorySearch.highlightQuery(nextProps) || {};\n      queryOptions.size = 20;\n\n      _this2.props.setQueryOptions(nextProps.componentId, queryOptions);\n    });\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      return _this2.setReact(nextProps);\n    });\n\n    if (Array.isArray(nextProps.suggestions) && this.state.currentValue.trim().length) {\n      // shallow check allows us to set suggestions even if the next set\n      // of suggestions are same as the current one\n      if (this.props.suggestions !== nextProps.suggestions) {\n        this.setState({\n          suggestions: this.onSuggestions(nextProps.suggestions)\n        });\n      }\n    }\n\n    (0, _helper.checkSomePropChange)(this.props, nextProps, ['fieldWeights', 'fuzziness', 'queryFormat', 'dataField', 'categoryField'], function () {\n      _this2.updateQuery(nextProps.componentId, _this2.state.currentValue, nextProps);\n    });\n\n    if (this.props.defaultSelected !== nextProps.defaultSelected) {\n      this.setValue(nextProps.defaultSelected, true, nextProps);\n    } else if ( // since, selectedValue will be updated when currentValue changes,\n    // we must only check for the changes introduced by\n    // clear action from SelectedFilters component in which case,\n    // the currentValue will never match the updated selectedValue\n    this.props.selectedValue !== nextProps.selectedValue && this.state.currentValue !== nextProps.selectedValue) {\n      this.setValue(nextProps.selectedValue || '', true, nextProps);\n    }\n  };\n\n  CategorySearch.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  CategorySearch.prototype.render = function render() {\n    var _this3 = this;\n\n    var suggestionsList = [];\n    var finalSuggestionsList = [];\n    var _props = this.props,\n        theme = _props.theme,\n        themePreset = _props.themePreset,\n        renderSuggestions = _props.renderSuggestions,\n        categories = _props.categories;\n    var filteredCategories = categories.filter(function (category) {\n      return Boolean(category.key);\n    }); // filter out empty categories\n\n    if (!this.state.currentValue && this.props.defaultSuggestions && this.props.defaultSuggestions.length) {\n      finalSuggestionsList = this.props.defaultSuggestions;\n    } else if (this.state.currentValue) {\n      suggestionsList = this.state.suggestions;\n    }\n\n    if (this.state.currentValue && this.state.suggestions.length && filteredCategories.length) {\n      var categorySuggestions = [{\n        label: this.state.currentValue + ' in all categories',\n        value: this.state.currentValue,\n        category: '*',\n        // no source object exists for category based suggestions\n        source: null\n      }, {\n        label: this.state.currentValue + ' in ' + filteredCategories[0].key,\n        value: this.state.currentValue,\n        category: filteredCategories[0].key,\n        source: null\n      }];\n\n      if (filteredCategories.length > 1) {\n        categorySuggestions = [].concat(categorySuggestions, [{\n          label: this.state.currentValue + ' in ' + filteredCategories[1].key,\n          value: this.state.currentValue,\n          category: filteredCategories[1].key,\n          source: null\n        }]);\n      }\n\n      finalSuggestionsList = [].concat(categorySuggestions, suggestionsList);\n    }\n\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.props.defaultSuggestions || this.props.autosuggest ? _react2.default.createElement(_downshift2.default, _extends({\n      id: this.props.componentId + '-downshift',\n      onChange: this.onSuggestionSelected,\n      onStateChange: this.handleStateChange,\n      isOpen: this.state.isOpen,\n      itemToString: function itemToString(i) {\n        return i;\n      },\n      render: function render(_ref) {\n        var getInputProps = _ref.getInputProps,\n            getItemProps = _ref.getItemProps,\n            isOpen = _ref.isOpen,\n            highlightedIndex = _ref.highlightedIndex;\n        return _react2.default.createElement('div', {\n          className: _Input.suggestionsContainer\n        }, _react2.default.createElement(_Input2.default, _extends({\n          showClear: _this3.props.showClear,\n          id: _this3.props.componentId + '-input',\n          showIcon: _this3.props.showIcon,\n          iconPosition: _this3.props.iconPosition,\n          innerRef: _this3.props.innerRef\n        }, getInputProps({\n          className: (0, _helper.getClassName)(_this3.props.innerClass, 'input'),\n          placeholder: _this3.props.placeholder,\n          value: _this3.state.currentValue === null ? '' : _this3.state.currentValue,\n          onChange: _this3.onInputChange,\n          onBlur: _this3.props.onBlur,\n          onFocus: _this3.handleFocus,\n          onKeyPress: _this3.props.onKeyPress,\n          onKeyDown: function onKeyDown(e) {\n            return _this3.handleKeyDown(e, highlightedIndex);\n          },\n          onKeyUp: _this3.props.onKeyUp\n        }), {\n          themePreset: themePreset\n        })), _this3.renderIcons(), renderSuggestions && renderSuggestions({\n          currentValue: _this3.state.currentValue,\n          isOpen: isOpen,\n          getItemProps: getItemProps,\n          highlightedIndex: highlightedIndex,\n          suggestions: _this3.props.suggestions,\n          categories: filteredCategories,\n          parsedSuggestions: suggestionsList\n        }), !renderSuggestions && isOpen && finalSuggestionsList.length ? _react2.default.createElement('ul', {\n          className: (0, _Input.suggestions)(themePreset, theme) + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'list')\n        }, finalSuggestionsList.slice(0, 10).map(function (item, index) {\n          return _react2.default.createElement('li', _extends({}, getItemProps({\n            item: item\n          }), {\n            key: index + 1 + '-' + item.value,\n            style: {\n              backgroundColor: _this3.getBackgroundColor(highlightedIndex, index)\n            }\n          }), _react2.default.createElement(Text, {\n            primary: !!item.category\n          }, item.label));\n        })) : null);\n      }\n    }, this.props.downShiftProps)) : _react2.default.createElement('div', {\n      className: _Input.suggestionsContainer\n    }, _react2.default.createElement(_Input2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'input'),\n      placeholder: this.props.placeholder,\n      value: this.state.currentValue ? this.state.currentValue : '',\n      onChange: this.onInputChange,\n      onBlur: this.props.onBlur,\n      onFocus: this.props.onFocus,\n      onKeyPress: this.props.onKeyPress,\n      onKeyDown: this.props.onKeyDown,\n      onKeyUp: this.props.onKeyUp,\n      autoFocus: this.props.autoFocus,\n      iconPosition: this.props.iconPosition,\n      showClear: this.props.showClear,\n      showIcon: this.props.showIcon,\n      innerRef: this.props.innerRef,\n      themePreset: themePreset\n    }), this.renderIcons()));\n  };\n\n  return CategorySearch;\n}(_react.Component);\n\nCategorySearch.highlightQuery = function (props) {\n  if (props.customHighlight) {\n    return props.customHighlight(props);\n  }\n\n  if (!props.highlight) {\n    return null;\n  }\n\n  var fields = {};\n  var highlightField = props.highlightField ? props.highlightField : props.dataField;\n\n  if (typeof highlightField === 'string') {\n    fields[highlightField] = {};\n  } else if (Array.isArray(highlightField)) {\n    highlightField.forEach(function (item) {\n      fields[item] = {};\n    });\n  }\n\n  return {\n    highlight: {\n      pre_tags: ['<mark>'],\n      post_tags: ['</mark>'],\n      fields: fields\n    }\n  };\n};\n\nCategorySearch.defaultQuery = function (value, props, category) {\n  var finalQuery = null;\n  var fields = void 0;\n\n  if (value) {\n    if (Array.isArray(props.dataField)) {\n      fields = props.dataField;\n    } else {\n      fields = [props.dataField];\n    }\n\n    finalQuery = {\n      bool: {\n        should: CategorySearch.shouldQuery(value, fields, props),\n        minimum_should_match: '1'\n      }\n    };\n\n    if (category && category !== '*') {\n      var _term;\n\n      finalQuery = [finalQuery, {\n        term: (_term = {}, _term[props.categoryField] = category, _term)\n      }];\n    }\n  }\n\n  if (value === '') {\n    finalQuery = {\n      match_all: {}\n    };\n  }\n\n  return finalQuery;\n};\n\nCategorySearch.shouldQuery = function (value, dataFields, props) {\n  var fields = dataFields.map(function (field, index) {\n    return '' + field + (Array.isArray(props.fieldWeights) && props.fieldWeights[index] ? '^' + props.fieldWeights[index] : '');\n  });\n\n  if (props.queryFormat === 'and') {\n    return [{\n      multi_match: {\n        query: value,\n        fields: fields,\n        type: 'cross_fields',\n        operator: 'and'\n      }\n    }, {\n      multi_match: {\n        query: value,\n        fields: fields,\n        type: 'phrase_prefix',\n        operator: 'and'\n      }\n    }];\n  }\n\n  return [{\n    multi_match: {\n      query: value,\n      fields: fields,\n      type: 'best_fields',\n      operator: 'or',\n      fuzziness: props.fuzziness ? props.fuzziness : 0\n    }\n  }, {\n    multi_match: {\n      query: value,\n      fields: fields,\n      type: 'phrase_prefix',\n      operator: 'or'\n    }\n  }];\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.getAggsQuery = function (field) {\n    var _aggs;\n\n    return {\n      aggs: (_aggs = {}, _aggs[field] = {\n        terms: {\n          field: field\n        }\n      }, _aggs)\n    };\n  };\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: _this4.internalComponent\n      });\n    }\n  };\n\n  this.onSuggestions = function (searchSuggestions) {\n    if (_this4.props.onSuggestion) {\n      return searchSuggestions.map(function (suggestion) {\n        return _this4.props.onSuggestion(suggestion);\n      });\n    }\n\n    var fields = Array.isArray(_this4.props.dataField) ? _this4.props.dataField : [_this4.props.dataField];\n    return (0, _suggestions2.default)(fields, searchSuggestions, _this4.state.currentValue.toLowerCase());\n  };\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;\n    var category = arguments[3];\n    var cause = arguments[4]; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n\n    var performUpdate = function performUpdate() {\n      _this4.setState({\n        currentValue: value,\n        suggestions: []\n      }, function () {\n        if (isDefaultValue) {\n          if (_this4.props.autosuggest) {\n            _this4.setState({\n              isOpen: false\n            });\n\n            _this4.updateQuery(_this4.internalComponent, value, props);\n          } // in case of strict selection only SUGGESTION_SELECT should be able\n          // to set the query otherwise the value should reset\n\n\n          if (props.strictSelection) {\n            if (cause === _causes2.default.SUGGESTION_SELECT || value === '') {\n              _this4.updateQuery(props.componentId, value, props, category);\n            } else {\n              _this4.setValue('', true);\n            }\n          } else {\n            _this4.updateQuery(props.componentId, value, props, category);\n          }\n        } else {\n          // debounce for handling text while typing\n          _this4.handleTextChange(value);\n        }\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(value);\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);\n  };\n\n  this.handleTextChange = (0, _helper.debounce)(function (value) {\n    if (_this4.props.autosuggest) {\n      _this4.updateQuery(_this4.internalComponent, value, _this4.props);\n    } else {\n      _this4.updateQuery(_this4.props.componentId, value, _this4.props);\n    }\n  }, this.props.debounce);\n\n  this.updateQuery = function (componentId, value, props, category) {\n    var customQuery = props.customQuery,\n        defaultQuery = props.defaultQuery,\n        filterLabel = props.filterLabel,\n        showFilter = props.showFilter,\n        URLParams = props.URLParams; // defaultQuery from props is always appended regardless of a customQuery\n\n    var query = customQuery || CategorySearch.defaultQuery;\n    var queryObject = defaultQuery ? {\n      bool: {\n        must: [].concat(query(value, props, category), defaultQuery(value, props, category))\n      }\n    } : query(value, props, category);\n    props.updateQuery({\n      componentId: componentId,\n      query: queryObject,\n      value: value,\n      label: filterLabel,\n      showFilter: showFilter,\n      URLParams: URLParams,\n      componentType: 'CATEGORYSEARCH'\n    });\n  };\n\n  this.handleFocus = function (event) {\n    _this4.setState({\n      isOpen: true\n    });\n\n    if (_this4.props.onFocus) {\n      _this4.props.onFocus(event);\n    }\n  };\n\n  this.clearValue = function () {\n    _this4.setValue('', true);\n\n    _this4.onValueSelected(null, _causes2.default.CLEAR_VALUE);\n  };\n\n  this.handleKeyDown = function (event, highlightedIndex) {\n    // if a suggestion was selected, delegate the handling to suggestion handler\n    if (event.key === 'Enter' && highlightedIndex === null) {\n      _this4.setValue(event.target.value, true);\n\n      _this4.onValueSelected(event.target.value, _causes2.default.ENTER_PRESS);\n    }\n\n    if (_this4.props.onKeyDown) {\n      _this4.props.onKeyDown(event);\n    }\n  };\n\n  this.onInputChange = function (e) {\n    var value = e.target.value;\n\n    if (!_this4.state.isOpen) {\n      _this4.setState({\n        isOpen: true\n      });\n    }\n\n    _this4.setValue(value);\n  };\n\n  this.onSuggestionSelected = function (suggestion) {\n    _this4.setValue(suggestion.value, true, _this4.props, suggestion.category, _causes2.default.SUGGESTION_SELECT);\n\n    _this4.onValueSelected(suggestion.value, suggestion.category, _causes2.default.SUGGESTION_SELECT, suggestion.source);\n  };\n\n  this.onValueSelected = function () {\n    for (var _len = arguments.length, cause = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      cause[_key - 2] = arguments[_key];\n    }\n\n    var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this4.state.currentValue;\n    var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var onValueSelected = _this4.props.onValueSelected;\n\n    if (onValueSelected) {\n      onValueSelected.apply(undefined, [currentValue, category].concat(cause));\n    }\n  };\n\n  this.handleStateChange = function (changes) {\n    var isOpen = changes.isOpen,\n        type = changes.type;\n\n    if (type === _downshift2.default.stateChangeTypes.mouseUp) {\n      _this4.setState({\n        isOpen: isOpen\n      });\n    }\n  };\n\n  this.getBackgroundColor = function (highlightedIndex, index) {\n    var isDark = _this4.props.themePreset === 'dark';\n\n    if (isDark) {\n      return highlightedIndex === index ? '#555' : '#424242';\n    }\n\n    return highlightedIndex === index ? '#eee' : '#fff';\n  };\n\n  this.renderIcon = function () {\n    if (_this4.props.showIcon) {\n      return _this4.props.icon || _react2.default.createElement(_SearchSvg2.default, null);\n    }\n\n    return null;\n  };\n\n  this.renderCancelIcon = function () {\n    if (_this4.props.showClear) {\n      return _this4.props.clearIcon || _react2.default.createElement(_CancelSvg2.default, null);\n    }\n\n    return null;\n  };\n\n  this.renderIcons = function () {\n    return _react2.default.createElement('div', null, _this4.state.currentValue && _this4.props.showClear && _react2.default.createElement(_InputIcon2.default, {\n      onClick: _this4.clearValue,\n      iconPosition: 'right',\n      clearIcon: _this4.props.iconPosition === 'right'\n    }, _this4.renderCancelIcon()), _react2.default.createElement(_InputIcon2.default, {\n      iconPosition: _this4.props.iconPosition\n    }, _this4.renderIcon()));\n  };\n};\n\nCategorySearch.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  options: _types2.default.options,\n  categories: _types2.default.data,\n  selectedValue: _types2.default.selectedValue,\n  suggestions: _types2.default.suggestions,\n  // component props\n  autoFocus: _types2.default.bool,\n  autosuggest: _types2.default.bool,\n  beforeValueChange: _types2.default.func,\n  categoryField: _types2.default.string,\n  className: _types2.default.string,\n  clearIcon: _types2.default.children,\n  componentId: _types2.default.stringRequired,\n  customHighlight: _types2.default.func,\n  customQuery: _types2.default.func,\n  dataField: _types2.default.dataFieldArray,\n  debounce: _types2.default.number,\n  defaultSelected: _types2.default.string,\n  defaultSuggestions: _types2.default.suggestions,\n  downShiftProps: _types2.default.props,\n  fieldWeights: _types2.default.fieldWeights,\n  filterLabel: _types2.default.string,\n  fuzziness: _types2.default.fuzziness,\n  highlight: _types2.default.bool,\n  highlightField: _types2.default.stringOrArray,\n  icon: _types2.default.children,\n  iconPosition: _types2.default.iconPosition,\n  innerClass: _types2.default.style,\n  innerRef: _types2.default.func,\n  onBlur: _types2.default.func,\n  onFocus: _types2.default.func,\n  onKeyDown: _types2.default.func,\n  onKeyPress: _types2.default.func,\n  onKeyUp: _types2.default.func,\n  onQueryChange: _types2.default.func,\n  onSuggestion: _types2.default.func,\n  onValueChange: _types2.default.func,\n  onValueSelected: _types2.default.func,\n  placeholder: _types2.default.string,\n  queryFormat: _types2.default.queryFormatSearch,\n  react: _types2.default.react,\n  renderSuggestions: _types2.default.func,\n  showClear: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  showIcon: _types2.default.bool,\n  style: _types2.default.style,\n  title: _types2.default.title,\n  theme: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  URLParams: _types2.default.bool,\n  strictSelection: _types2.default.bool\n};\nCategorySearch.defaultProps = {\n  autosuggest: true,\n  className: null,\n  debounce: 0,\n  downShiftProps: {},\n  iconPosition: 'left',\n  placeholder: 'Search',\n  queryFormat: 'or',\n  showClear: false,\n  showFilter: true,\n  showIcon: true,\n  style: {},\n  URLParams: false,\n  strictSelection: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    categories: state.aggregations[props.componentId] && state.aggregations[props.componentId][props.categoryField] && state.aggregations[props.componentId][props.categoryField].buckets || [],\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    suggestions: state.hits[props.componentId] && state.hits[props.componentId].hits || [],\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component, name) {\n      return dispatch((0, _actions.addComponent)(component, name));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props, execute) {\n      return dispatch((0, _actions.setQueryOptions)(component, props, execute));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(CategorySearch));","map":null,"metadata":{},"sourceType":"script"}