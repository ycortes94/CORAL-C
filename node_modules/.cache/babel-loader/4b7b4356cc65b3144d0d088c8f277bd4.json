{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getCompositeAggsQuery = exports.getAggsQuery = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar getAggsQuery = function getAggsQuery(query, props) {\n  var _clonedQuery$aggs;\n\n  var clonedQuery = _extends({}, query);\n\n  var dataField = props.dataField,\n      size = props.size,\n      sortBy = props.sortBy,\n      showMissing = props.showMissing,\n      missingLabel = props.missingLabel;\n  clonedQuery.size = 0;\n  clonedQuery.aggs = (_clonedQuery$aggs = {}, _clonedQuery$aggs[dataField] = {\n    terms: _extends({\n      field: dataField,\n      size: size,\n      order: (0, _helper.getAggsOrder)(sortBy || 'count')\n    }, showMissing ? {\n      missing: missingLabel\n    } : {})\n  }, _clonedQuery$aggs);\n\n  if (props.nestedField) {\n    clonedQuery.aggs = {\n      reactivesearch_nested: {\n        nested: {\n          path: props.nestedField\n        },\n        aggs: clonedQuery.aggs\n      }\n    };\n  }\n\n  return clonedQuery;\n};\n\nvar getCompositeAggsQuery = function getCompositeAggsQuery(query, props, after) {\n  var _ref, _clonedQuery$aggs2;\n\n  var clonedQuery = _extends({}, query); // missing label not available in composite aggs\n\n\n  var dataField = props.dataField,\n      size = props.size,\n      sortBy = props.sortBy,\n      showMissing = props.showMissing; // composite aggs only allows asc and desc\n\n  var order = sortBy === 'count' ? {} : {\n    order: sortBy\n  };\n  clonedQuery.aggs = (_clonedQuery$aggs2 = {}, _clonedQuery$aggs2[dataField] = {\n    composite: _extends({\n      sources: [(_ref = {}, _ref[dataField] = {\n        terms: _extends({\n          field: dataField\n        }, order, showMissing ? {\n          missing_bucket: true\n        } : {})\n      }, _ref)],\n      size: size\n    }, after)\n  }, _clonedQuery$aggs2);\n\n  if (props.nestedField) {\n    clonedQuery.aggs = {\n      reactivesearch_nested: {\n        nested: {\n          path: props.nestedField\n        },\n        aggs: clonedQuery.aggs\n      }\n    };\n  }\n\n  return clonedQuery;\n};\n\nexports.getAggsQuery = getAggsQuery;\nexports.getCompositeAggsQuery = getCompositeAggsQuery;","map":null,"metadata":{},"sourceType":"script"}