{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseHits = exports.handleA11yAction = exports.getInnerKey = exports.getClassName = exports.checkSomePropChange = exports.checkPropChange = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.isEqual = isEqual;\nexports.debounce = debounce;\nexports.getQueryOptions = getQueryOptions;\nexports.buildQuery = buildQuery;\nexports.pushToAndClause = pushToAndClause;\nexports.checkValueChange = checkValueChange;\nexports.getAggsOrder = getAggsOrder;\nexports.formatDate = formatDate;\n\nvar _dateFormats = require('./dateFormats');\n\nvar _dateFormats2 = _interopRequireDefault(_dateFormats);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction isEqual(x, y) {\n  if (x === y) return true;\n  if (!(x instanceof Object) || !(y instanceof Object)) return false;\n  if (x.constructor !== y.constructor) return false;\n\n  for (var p in x) {\n    if (!x.hasOwnProperty(p)) continue;\n    if (!y.hasOwnProperty(p)) return false;\n    if (x[p] === y[p]) continue;\n    if (typeof x[p] !== 'object') return false;\n    if (!isEqual(x[p], y[p])) return false;\n  }\n\n  for (var _p in y) {\n    if (y.hasOwnProperty(_p) && !x.hasOwnProperty(_p)) return false;\n  }\n\n  return true;\n}\n\nfunction debounce(callback, wait) {\n  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;\n  var timeout = null;\n  var callbackArgs = null;\n\n  var later = function later() {\n    return callback.apply(context, callbackArgs);\n  };\n\n  return function debouncedFunction() {\n    callbackArgs = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nfunction getQueryOptions(props) {\n  var options = {};\n\n  if (props.size !== undefined) {\n    options.size = props.size;\n  }\n\n  if (props.includeFields || props.excludeFields) {\n    var source = {};\n\n    if (props.includeFields) {\n      source.includes = props.includeFields;\n    }\n\n    if (props.excludeFields) {\n      source.excludes = props.excludeFields;\n    }\n\n    options._source = source;\n  }\n\n  return options;\n}\n\nfunction getOperation(conjunction) {\n  if (conjunction === 'and') {\n    return 'must';\n  }\n\n  if (conjunction === 'or') {\n    return 'should';\n  }\n\n  return 'must_not';\n}\n\nfunction createBoolQuery(operation, query) {\n  var resultQuery = null;\n\n  if (Array.isArray(query) && query.length || !Array.isArray(query) && query) {\n    resultQuery = {\n      bool: _defineProperty({}, operation, query)\n    };\n  }\n\n  if (operation === 'should' && resultQuery) {\n    resultQuery = {\n      bool: _extends({}, resultQuery.bool, {\n        minimum_should_match: 1\n      })\n    };\n  }\n\n  return resultQuery;\n}\n\nfunction getQuery(react, queryList) {\n  var query = [];\n  Object.keys(react).forEach(function (conjunction) {\n    if (Array.isArray(react[conjunction])) {\n      var operation = getOperation(conjunction);\n      var queryArr = react[conjunction].map(function (comp) {\n        if (typeof comp !== 'string') {\n          return getQuery(comp, queryList);\n        } else if (comp in queryList) {\n          return queryList[comp];\n        }\n\n        return null;\n      }).filter(function (item) {\n        return !!item;\n      });\n      var boolQuery = createBoolQuery(operation, queryArr);\n\n      if (boolQuery) {\n        query = [].concat(_toConsumableArray(query), [boolQuery]);\n      }\n    } else if (typeof react[conjunction] === 'string') {\n      var _operation = getOperation(conjunction);\n\n      var _boolQuery = createBoolQuery(_operation, queryList[react[conjunction]]);\n\n      if (_boolQuery) {\n        query = [].concat(_toConsumableArray(query), [_boolQuery]);\n      }\n    } else if (typeof react[conjunction] === 'object' && react[conjunction] !== null) {\n      var _boolQuery2 = getQuery(react[conjunction], queryList);\n\n      if (_boolQuery2) {\n        query = [].concat(_toConsumableArray(query), [_boolQuery2]);\n      }\n    }\n  });\n\n  if (Array.isArray(query) && query.length) {\n    return {\n      bool: {\n        must: query\n      }\n    };\n  }\n\n  if (query && Object.keys(query).length) {\n    return query;\n  }\n\n  return null;\n}\n\nfunction getExternalQueryOptions(react, options, component) {\n  var queryOptions = {};\n  Object.keys(react).forEach(function (conjunction) {\n    if (Array.isArray(react[conjunction])) {\n      react[conjunction].forEach(function (comp) {\n        if (options[comp]) {\n          queryOptions = _extends({}, queryOptions, options[comp]);\n        }\n      });\n    } else if (typeof react[conjunction] === 'string') {\n      if (options[react[conjunction]]) {\n        queryOptions = _extends({}, queryOptions, options[react[conjunction]]);\n      }\n    } else if (typeof react[conjunction] === 'object' && react[conjunction] !== null && !Array.isArray(react[conjunction])) {\n      queryOptions = _extends({}, queryOptions, getExternalQueryOptions(react[conjunction], options));\n    }\n  });\n\n  if (options[component]) {\n    queryOptions = _extends({}, queryOptions, options[component]);\n  }\n\n  return queryOptions;\n}\n\nfunction buildQuery(component, dependencyTree, queryList, queryOptions) {\n  var queryObj = null;\n  var options = null;\n\n  if (component in dependencyTree) {\n    queryObj = getQuery(dependencyTree[component], queryList);\n    options = getExternalQueryOptions(dependencyTree[component], queryOptions, component);\n  }\n\n  return {\n    queryObj: queryObj,\n    options: options\n  };\n}\n\nfunction pushToAndClause(reactProp, component) {\n  var react = _extends({}, reactProp);\n\n  if (react.and) {\n    if (Array.isArray(react.and)) {\n      react.and = [].concat(_toConsumableArray(react.and), [component]);\n      return react;\n    } else if (typeof react.and === 'string') {\n      react.and = [react.and, component];\n      return react;\n    }\n\n    react.and = pushToAndClause(react.and, component);\n    return react;\n  }\n\n  return _extends({}, react, {\n    and: component\n  });\n}\n\nfunction checkValueChange(componentId, value, beforeValueChange, performUpdate) {\n  var selectedValue = value;\n\n  if (Array.isArray(value) && !value.length) {\n    selectedValue = null;\n  }\n\n  if (beforeValueChange) {\n    beforeValueChange(selectedValue).then(performUpdate).catch(function (e) {\n      console.warn(componentId + ' - beforeValueChange rejected the promise with ', e);\n    });\n  } else {\n    performUpdate();\n  }\n}\n\nfunction getAggsOrder(sortBy) {\n  if (sortBy === 'count') {\n    return {\n      _count: 'desc'\n    };\n  }\n\n  return {\n    _term: sortBy\n  };\n}\n\nvar checkPropChange = exports.checkPropChange = function checkPropChange(prevProp, nextProp, callback) {\n  if (!isEqual(prevProp, nextProp)) {\n    callback();\n    return true;\n  }\n\n  return false;\n};\n\nvar checkSomePropChange = exports.checkSomePropChange = function checkSomePropChange(prevProps, nextProps, propsList, callback) {\n  propsList.some(function (prop) {\n    return checkPropChange(prevProps[prop], nextProps[prop], callback);\n  });\n};\n\nvar getClassName = exports.getClassName = function getClassName(classMap, component) {\n  return classMap && classMap[component] || '';\n};\n\nvar getInnerKey = exports.getInnerKey = function getInnerKey(obj, key) {\n  return obj && obj[key] || {};\n};\n\nvar handleA11yAction = exports.handleA11yAction = function handleA11yAction(e, callback) {\n  if (e.key === 'Enter' || e.key === ' ') {\n    e.preventDefault();\n    callback();\n  }\n};\n\nvar highlightResults = function highlightResults(result) {\n  var data = _extends({}, result);\n\n  if (data.highlight) {\n    Object.keys(data.highlight).forEach(function (highlightItem) {\n      var highlightValue = data.highlight[highlightItem][0];\n      data._source = _extends({}, data._source, _defineProperty({}, highlightItem, highlightValue));\n    });\n  }\n\n  return data;\n};\n\nvar parseHits = exports.parseHits = function parseHits(hits) {\n  var results = null;\n\n  if (hits) {\n    results = [].concat(_toConsumableArray(hits)).map(function (item) {\n      var streamProps = {};\n\n      if (item._updated) {\n        streamProps._updated = item._updated;\n      } else if (item._deleted) {\n        streamProps._deleted = item._deleted;\n      }\n\n      var data = highlightResults(item);\n      return _extends({\n        _id: data._id,\n        _index: data._index,\n        _type: data._type\n      }, data._source, streamProps);\n    });\n  }\n\n  return results;\n};\n\nfunction formatDate(date, props) {\n  switch (props.queryFormat) {\n    case 'epoch_millis':\n      return date.getTime();\n\n    case 'epoch_seconds':\n      return Math.floor(date.getTime() / 1000);\n\n    default:\n      {\n        if (_dateFormats2.default[props.queryFormat]) {\n          return date.toString(_dateFormats2.default[props.queryFormat]);\n        }\n\n        return date;\n      }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}