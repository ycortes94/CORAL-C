{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _Button = require('../../styles/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ToggleButton = function (_Component) {\n  _inherits(ToggleButton, _Component);\n\n  function ToggleButton(props) {\n    _classCallCheck(this, ToggleButton);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentValue: []\n    };\n    _this.locked = false;\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  ToggleButton.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.props.componentId);\n    this.setReact(this.props);\n\n    if (this.props.selectedValue) {\n      this.handleToggle(this.props.selectedValue, true);\n    } else if (this.props.defaultSelected) {\n      this.handleToggle(this.props.defaultSelected, true);\n    }\n  };\n\n  ToggleButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      _this2.setReact(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.dataField, nextProps.dataField, function () {\n      _this2.updateQuery(_this2.state.currentValue, nextProps);\n    });\n\n    if (!(0, _helper.isEqual)(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.handleToggle(nextProps.defaultSelected, true, nextProps);\n    } else if (nextProps.multiSelect) {\n      // for multiselect selectedValue will be an array\n      if (!(0, _helper.isEqual)(this.state.currentValue, nextProps.selectedValue)) {\n        this.handleToggle(nextProps.selectedValue || [], true, nextProps);\n      }\n    } else {\n      // else multiselect will be a string\n      var currentValue = this.state.currentValue[0] ? this.state.currentValue[0].value : null;\n\n      if (!(0, _helper.isEqual)(currentValue, nextProps.selectedValue)) {\n        this.handleToggle(nextProps.selectedValue || [], true, nextProps);\n      }\n    }\n  };\n\n  ToggleButton.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n  };\n\n  ToggleButton.prototype.setReact = function setReact(props) {\n    if (props.react) {\n      props.watchComponent(props.componentId, props.react);\n    }\n  };\n\n  ToggleButton.prototype.render = function render() {\n    var _this3 = this;\n\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: _Button.toggleButtons + ' ' + (this.props.className || '')\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), this.props.data.map(function (item) {\n      var isSelected = _this3.state.currentValue.some(function (value) {\n        return value.value === item.value;\n      });\n\n      return _react2.default.createElement(_Button2.default, {\n        className: (0, _helper.getClassName)(_this3.props.innerClass, 'button') + ' ' + (isSelected ? 'active' : ''),\n        onClick: function onClick() {\n          return _this3.handleToggle(item);\n        },\n        key: item.value,\n        primary: isSelected,\n        large: true\n      }, item.label);\n    }));\n  };\n\n  return ToggleButton;\n}(_react.Component);\n\nToggleButton.parseValue = function (value, props) {\n  if (Array.isArray(value)) {\n    return props.data.filter(function (item) {\n      return value.includes(item.value);\n    });\n  }\n\n  return props.data.filter(function (item) {\n    return item.value === value;\n  });\n};\n\nToggleButton.defaultQuery = function (value, props) {\n  var query = null;\n\n  if (value && value.length) {\n    query = {\n      bool: {\n        boost: 1.0,\n        minimum_should_match: 1,\n        should: value.map(function (item) {\n          var _term;\n\n          return {\n            term: (_term = {}, _term[props.dataField] = item.value, _term)\n          };\n        })\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.handleToggle = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;\n    var currentValue = _this4.state.currentValue;\n    var toggleValue = value;\n    var finalValue = [];\n\n    if (isDefaultValue) {\n      finalValue = ToggleButton.parseValue(toggleValue, props);\n    } else if (_this4.props.multiSelect) {\n      finalValue = currentValue.some(function (item) {\n        return item.value === toggleValue.value;\n      }) ? currentValue.filter(function (item) {\n        return item.value !== toggleValue.value;\n      }) : currentValue.concat(toggleValue);\n    } else {\n      finalValue = currentValue.some(function (item) {\n        return item.value === toggleValue.value;\n      }) ? [] : [toggleValue];\n    }\n\n    _this4.setValue(finalValue);\n  };\n\n  this.setValue = function (value) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this4.locked) {\n      return;\n    }\n\n    _this4.locked = true;\n\n    var performUpdate = function performUpdate() {\n      _this4.setState({\n        currentValue: value\n      }, function () {\n        _this4.updateQuery(value, props);\n\n        _this4.locked = false;\n        if (props.onValueChange) props.onValueChange(value);\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, props.multiSelect ? value : value[0], props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var query = props.customQuery || ToggleButton.defaultQuery;\n    var filterValue = value;\n\n    if (!props.multiSelect) {\n      filterValue = value[0] ? value[0].value : null;\n    }\n\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query(value, props),\n      value: filterValue,\n      // sets a string in URL not array\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'TOGGLEBUTTON'\n    });\n  };\n};\n\nToggleButton.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  data: _types2.default.data,\n  dataField: _types2.default.stringRequired,\n  defaultSelected: _types2.default.stringOrArray,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  multiSelect: _types2.default.bool,\n  onQueryChange: _types2.default.func,\n  react: _types2.default.react,\n  showFilter: _types2.default.bool,\n  style: _types2.default.style,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool\n};\nToggleButton.defaultProps = {\n  className: null,\n  multiSelect: true,\n  showFilter: true,\n  style: {},\n  URLParams: false\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(ToggleButton);","map":null,"metadata":{},"sourceType":"script"}