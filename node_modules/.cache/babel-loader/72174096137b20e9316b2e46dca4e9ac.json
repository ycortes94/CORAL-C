{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _emotion = require('emotion');\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _utils = require('./utils');\n\nvar _Title = require('../../styles/Title');\n\nvar _Title2 = _interopRequireDefault(_Title);\n\nvar _Container = require('../../styles/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _Button = require('../../styles/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _Dropdown = require('../shared/Dropdown');\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nvar _utils2 = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MultiDropdownList = function (_Component) {\n  _inherits(MultiDropdownList, _Component);\n\n  function MultiDropdownList(props) {\n    _classCallCheck(this, MultiDropdownList);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = {\n      currentValue: {},\n      options: [],\n      after: {},\n      // for composite aggs\n      isLastBucket: false\n    };\n    _this.locked = false;\n    _this.internalComponent = props.componentId + '__internal';\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n    return _this;\n  }\n\n  MultiDropdownList.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.internalComponent);\n    this.props.addComponent(this.props.componentId);\n    this.updateQueryOptions(this.props);\n    this.setReact(this.props);\n\n    if (this.props.selectedValue) {\n      this.setValue(this.props.selectedValue, true);\n    } else if (this.props.defaultSelected) {\n      this.setValue(this.props.defaultSelected, true);\n    }\n  };\n\n  MultiDropdownList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      return _this2.setReact(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.options, nextProps.options, function () {\n      var showLoadMore = nextProps.showLoadMore,\n          dataField = nextProps.dataField;\n      var options = _this2.state.options;\n\n      if (showLoadMore) {\n        // append options with showLoadMore\n        var buckets = nextProps.options[dataField].buckets;\n        var nextOptions = [].concat(options, buckets.map(function (bucket) {\n          return {\n            key: bucket.key[dataField],\n            doc_count: bucket.doc_count\n          };\n        }));\n        var after = nextProps.options[dataField].after_key; // detect the last bucket by checking if the next set of buckets were empty\n\n        var isLastBucket = !buckets.length;\n\n        _this2.setState({\n          after: {\n            after: after\n          },\n          isLastBucket: isLastBucket,\n          options: nextOptions\n        });\n      } else {\n        _this2.setState({\n          options: nextProps.options[nextProps.dataField] ? nextProps.options[nextProps.dataField].buckets : []\n        });\n      }\n    });\n    (0, _helper.checkSomePropChange)(this.props, nextProps, ['size', 'sortBy'], function () {\n      return _this2.updateQueryOptions(nextProps);\n    });\n    (0, _helper.checkPropChange)(this.props.dataField, nextProps.dataField, function () {\n      _this2.updateQueryOptions(nextProps);\n\n      _this2.updateQuery(Object.keys(_this2.state.currentValue), nextProps);\n    });\n    var selectedValue = Object.keys(this.state.currentValue);\n\n    if (this.props.selectAllLabel) {\n      selectedValue = selectedValue.filter(function (val) {\n        return val !== _this2.props.selectAllLabel;\n      });\n\n      if (this.state.currentValue[this.props.selectAllLabel]) {\n        selectedValue = [this.props.selectAllLabel];\n      }\n    }\n\n    if (!(0, _helper.isEqual)(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.setValue(nextProps.defaultSelected, true);\n    } else if (!(0, _helper.isEqual)(selectedValue, nextProps.selectedValue)) {\n      this.setValue(nextProps.selectedValue || [], true);\n    }\n  };\n\n  MultiDropdownList.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n    this.props.removeComponent(this.internalComponent);\n  };\n\n  MultiDropdownList.generateQueryOptions = function generateQueryOptions(props, after) {\n    var queryOptions = (0, _helper.getQueryOptions)(props);\n    return props.showLoadMore ? (0, _utils.getCompositeAggsQuery)(queryOptions, props, after) : (0, _utils.getAggsQuery)(queryOptions, props);\n  };\n\n  MultiDropdownList.prototype.render = function render() {\n    var _props = this.props,\n        showLoadMore = _props.showLoadMore,\n        loadMoreLabel = _props.loadMoreLabel;\n    var isLastBucket = this.state.isLastBucket;\n    var selectAll = [];\n\n    if (this.state.options.length === 0) {\n      return null;\n    }\n\n    if (this.props.selectAllLabel) {\n      selectAll = [{\n        key: this.props.selectAllLabel\n      }];\n    }\n\n    return _react2.default.createElement(_Container2.default, {\n      style: this.props.style,\n      className: this.props.className\n    }, this.props.title && _react2.default.createElement(_Title2.default, {\n      className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null\n    }, this.props.title), _react2.default.createElement(_Dropdown2.default, {\n      innerClass: this.props.innerClass,\n      items: [].concat(selectAll, this.state.options.filter(function (item) {\n        return String(item.key).trim().length;\n      }).map(function (item) {\n        return _extends({}, item, {\n          key: String(item.key)\n        });\n      })),\n      onChange: this.setValue,\n      selectedItem: this.state.currentValue,\n      placeholder: this.props.placeholder,\n      labelField: 'key',\n      multi: true,\n      showCount: this.props.showCount,\n      themePreset: this.props.themePreset,\n      renderListItem: this.props.renderListItem,\n      showSearch: this.props.showSearch,\n      transformData: this.props.transformData,\n      footer: showLoadMore && !isLastBucket && _react2.default.createElement('div', {\n        className: (0, _emotion.css)(_Button.loadMoreContainer)\n      }, _react2.default.createElement(_Button2.default, {\n        onClick: this.handleLoadMore\n      }, loadMoreLabel))\n    }));\n  };\n\n  return MultiDropdownList;\n}(_react.Component);\n\nMultiDropdownList.defaultQuery = function (value, props) {\n  var query = null;\n  var type = props.queryFormat === 'or' ? 'terms' : 'term';\n\n  if (!Array.isArray(value) || value.length === 0) {\n    return null;\n  }\n\n  if (props.selectAllLabel && value.includes(props.selectAllLabel)) {\n    if (props.showMissing) {\n      query = {\n        match_all: {}\n      };\n    } else {\n      query = {\n        exists: {\n          field: props.dataField\n        }\n      };\n    }\n  } else if (value) {\n    var listQuery = void 0;\n\n    if (props.queryFormat === 'or') {\n      if (props.showMissing) {\n        var _type, _ref;\n\n        var hasMissingTerm = value.includes(props.missingLabel);\n        var should = [(_ref = {}, _ref[type] = (_type = {}, _type[props.dataField] = value.filter(function (item) {\n          return item !== props.missingLabel;\n        }), _type), _ref)];\n\n        if (hasMissingTerm) {\n          should = should.concat({\n            bool: {\n              must_not: {\n                exists: {\n                  field: props.dataField\n                }\n              }\n            }\n          });\n        }\n\n        listQuery = {\n          bool: {\n            should: should\n          }\n        };\n      } else {\n        var _type2, _listQuery;\n\n        listQuery = (_listQuery = {}, _listQuery[type] = (_type2 = {}, _type2[props.dataField] = value, _type2), _listQuery);\n      }\n    } else {\n      // adds a sub-query with must as an array of objects for each term/value\n      var queryArray = value.map(function (item) {\n        var _type3, _ref2;\n\n        return _ref2 = {}, _ref2[type] = (_type3 = {}, _type3[props.dataField] = item, _type3), _ref2;\n      });\n      listQuery = {\n        bool: {\n          must: queryArray\n        }\n      };\n    }\n\n    query = value.length ? listQuery : null;\n  }\n\n  if (query && props.nestedField) {\n    return {\n      query: {\n        nested: {\n          path: props.nestedField,\n          query: query\n        }\n      }\n    };\n  }\n\n  return query;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      var newReact = (0, _helper.pushToAndClause)(react, _this3.internalComponent);\n      props.watchComponent(props.componentId, newReact);\n    } else {\n      props.watchComponent(props.componentId, {\n        and: _this3.internalComponent\n      });\n    }\n  };\n\n  this.setValue = function (value) {\n    var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this3.props; // ignore state updates when component is locked\n\n    if (props.beforeValueChange && _this3.locked) {\n      return;\n    }\n\n    _this3.locked = true;\n    var selectAllLabel = _this3.props.selectAllLabel;\n    var currentValue = _this3.state.currentValue;\n    var finalValues = null;\n\n    if (selectAllLabel && value.includes(selectAllLabel)) {\n      if (currentValue[selectAllLabel]) {\n        currentValue = {};\n        finalValues = [];\n      } else {\n        _this3.state.options.forEach(function (item) {\n          currentValue[item.key] = true;\n        });\n\n        currentValue[selectAllLabel] = true;\n        finalValues = [selectAllLabel];\n      }\n    } else if (isDefaultValue) {\n      finalValues = value;\n      currentValue = {};\n\n      if (value) {\n        value.forEach(function (item) {\n          currentValue[item] = true;\n        });\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue = currentValue,\n            del = _currentValue[selectAllLabel],\n            obj = _objectWithoutProperties(_currentValue, [selectAllLabel]);\n\n        currentValue = _extends({}, obj);\n      }\n    } else {\n      if (currentValue[value]) {\n        var _currentValue2 = currentValue,\n            _del = _currentValue2[value],\n            rest = _objectWithoutProperties(_currentValue2, [value]);\n\n        currentValue = _extends({}, rest);\n      } else {\n        currentValue[value] = true;\n      }\n\n      if (selectAllLabel && selectAllLabel in currentValue) {\n        var _currentValue3 = currentValue,\n            _del2 = _currentValue3[selectAllLabel],\n            _obj = _objectWithoutProperties(_currentValue3, [selectAllLabel]);\n\n        currentValue = _extends({}, _obj);\n      }\n\n      finalValues = Object.keys(currentValue);\n    }\n\n    var performUpdate = function performUpdate() {\n      _this3.setState({\n        currentValue: currentValue\n      }, function () {\n        _this3.updateQuery(finalValues, props);\n\n        _this3.locked = false;\n        if (props.onValueChange) props.onValueChange(finalValues);\n      });\n    };\n\n    (0, _helper.checkValueChange)(props.componentId, finalValues, props.beforeValueChange, performUpdate);\n  };\n\n  this.updateQuery = function (value, props) {\n    var query = props.customQuery || MultiDropdownList.defaultQuery;\n    props.updateQuery({\n      componentId: props.componentId,\n      query: query(value, props),\n      value: value,\n      label: props.filterLabel,\n      showFilter: props.showFilter,\n      URLParams: props.URLParams,\n      componentType: 'MULTIDROPDOWNLIST'\n    });\n  };\n\n  this.updateQueryOptions = function (props) {\n    var addAfterKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // when using composite aggs flush the current options for a fresh query\n\n    if (props.showLoadMore && !addAfterKey) {\n      _this3.setState({\n        options: []\n      });\n    } // for a new query due to other changes don't append after to get fresh results\n\n\n    var queryOptions = MultiDropdownList.generateQueryOptions(props, addAfterKey ? _this3.state.after : {});\n    props.setQueryOptions(_this3.internalComponent, queryOptions);\n  };\n\n  this.handleLoadMore = function () {\n    _this3.updateQueryOptions(_this3.props, true);\n  };\n};\n\nMultiDropdownList.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  options: _types2.default.options,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  beforeValueChange: _types2.default.func,\n  className: _types2.default.string,\n  componentId: _types2.default.stringRequired,\n  customQuery: _types2.default.func,\n  dataField: _types2.default.stringRequired,\n  defaultSelected: _types2.default.stringArray,\n  filterLabel: _types2.default.string,\n  innerClass: _types2.default.style,\n  onQueryChange: _types2.default.func,\n  onValueChange: _types2.default.func,\n  placeholder: _types2.default.string,\n  queryFormat: _types2.default.queryFormatSearch,\n  react: _types2.default.react,\n  renderListItem: _types2.default.func,\n  transformData: _types2.default.func,\n  selectAllLabel: _types2.default.string,\n  showCount: _types2.default.bool,\n  showFilter: _types2.default.bool,\n  size: _types2.default.number,\n  sortBy: _types2.default.sortByWithCount,\n  style: _types2.default.style,\n  themePreset: _types2.default.themePreset,\n  title: _types2.default.title,\n  URLParams: _types2.default.bool,\n  showMissing: _types2.default.bool,\n  missingLabel: _types2.default.string,\n  showSearch: _types2.default.bool,\n  showLoadMore: _types2.default.bool,\n  loadMoreLabel: _types2.default.title,\n  nestedField: _types2.default.string\n};\nMultiDropdownList.defaultProps = {\n  className: null,\n  placeholder: 'Select values',\n  queryFormat: 'or',\n  showCount: true,\n  showFilter: true,\n  size: 100,\n  sortBy: 'count',\n  style: {},\n  URLParams: false,\n  showMissing: false,\n  missingLabel: 'N/A',\n  showSearch: false,\n  showLoadMore: false,\n  loadMoreLabel: 'Load More'\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    options: props.nestedField && state.aggregations[props.componentId] ? state.aggregations[props.componentId].reactivesearch_nested : state.aggregations[props.componentId],\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,\n    themePreset: state.config.themePreset\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props) {\n      return dispatch((0, _actions.setQueryOptions)(component, props));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nexports.default = (0, _utils2.connect)(mapStateToProps, mapDispatchtoProps)(MultiDropdownList);","map":null,"metadata":{},"sourceType":"script"}