{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _actions = require('@appbaseio/reactivecore/lib/actions');\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar _types = require('@appbaseio/reactivecore/lib/utils/types');\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ReactiveComponent = function (_Component) {\n  _inherits(ReactiveComponent, _Component);\n\n  function ReactiveComponent(props) {\n    _classCallCheck(this, ReactiveComponent);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.internalComponent = null;\n    _this.defaultQuery = null;\n    props.setQueryListener(props.componentId, props.onQueryChange, null);\n\n    _this.setQuery = function (obj) {\n      _this.props.updateQuery(_extends({}, obj, {\n        componentId: props.componentId,\n        label: props.filterLabel,\n        showFilter: props.showFilter,\n        URLParams: props.URLParams\n      }));\n    };\n\n    if (props.defaultQuery) {\n      _this.internalComponent = props.componentId + '__internal';\n    }\n\n    return _this;\n  }\n\n  ReactiveComponent.prototype.componentWillMount = function componentWillMount() {\n    this.props.addComponent(this.props.componentId);\n\n    if (this.internalComponent) {\n      this.props.addComponent(this.internalComponent);\n    }\n\n    this.setReact(this.props); // set query for internal component\n\n    if (this.internalComponent && this.props.defaultQuery) {\n      this.defaultQuery = this.props.defaultQuery();\n\n      var _ref = this.defaultQuery || {},\n          query = _ref.query,\n          queryOptions = _objectWithoutProperties(_ref, ['query']);\n\n      if (queryOptions) {\n        this.props.setQueryOptions(this.internalComponent, queryOptions, false);\n      }\n\n      this.props.updateQuery({\n        componentId: this.internalComponent,\n        query: query || null\n      });\n    }\n  };\n\n  ReactiveComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (nextProps.onAllData && (!(0, _helper.isEqual)(nextProps.hits, this.props.hits) || !(0, _helper.isEqual)(nextProps.aggregations, this.props.aggregations))) {\n      nextProps.onAllData((0, _helper.parseHits)(nextProps.hits), nextProps.aggregations);\n    }\n\n    if (nextProps.defaultQuery && !(0, _helper.isEqual)(nextProps.defaultQuery(), this.defaultQuery)) {\n      this.defaultQuery = nextProps.defaultQuery();\n\n      var _ref2 = this.defaultQuery || {},\n          query = _ref2.query,\n          queryOptions = _objectWithoutProperties(_ref2, ['query']);\n\n      if (queryOptions) {\n        nextProps.setQueryOptions(this.internalComponent, queryOptions, false);\n      }\n\n      nextProps.updateQuery({\n        componentId: this.internalComponent,\n        query: query || null\n      });\n    }\n\n    (0, _helper.checkPropChange)(this.props.react, nextProps.react, function () {\n      _this2.setReact(nextProps);\n    });\n  };\n\n  ReactiveComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeComponent(this.props.componentId);\n\n    if (this.internalComponent) {\n      this.props.removeComponent(this.internalComponent);\n    }\n  };\n\n  ReactiveComponent.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        children = _props.children,\n        addFn = _props.addComponent,\n        watchFn = _props.watchComponent,\n        removeFn = _props.removeComponent,\n        queryOptionsFn = _props.setQueryOptions,\n        updateFn = _props.updateQuery,\n        rest = _objectWithoutProperties(_props, ['children', 'addComponent', 'watchComponent', 'removeComponent', 'setQueryOptions', 'updateQuery']);\n\n    try {\n      var childrenWithProps = _react2.default.Children.map(children, function (child) {\n        return _react2.default.cloneElement(child, _extends({}, rest, {\n          setQuery: _this3.setQuery\n        }));\n      });\n\n      return _react2.default.createElement('div', null, childrenWithProps);\n    } catch (e) {\n      return null;\n    }\n  };\n\n  return ReactiveComponent;\n}(_react.Component);\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.setReact = function (props) {\n    var react = props.react;\n\n    if (react) {\n      if (_this4.internalComponent) {\n        var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);\n        props.watchComponent(props.componentId, newReact);\n      } else {\n        props.watchComponent(props.componentId, react);\n      }\n    } else if (_this4.internalComponent) {\n      props.watchComponent(props.componentId, {\n        and: _this4.internalComponent\n      });\n    }\n  };\n};\n\nReactiveComponent.defaultProps = {\n  showFilter: true,\n  URLParams: false\n};\nReactiveComponent.propTypes = {\n  addComponent: _types2.default.funcRequired,\n  removeComponent: _types2.default.funcRequired,\n  setQueryListener: _types2.default.funcRequired,\n  setQueryOptions: _types2.default.funcRequired,\n  updateQuery: _types2.default.funcRequired,\n  watchComponent: _types2.default.funcRequired,\n  aggregations: _types2.default.selectedValues,\n  hits: _types2.default.data,\n  selectedValue: _types2.default.selectedValue,\n  // component props\n  children: _types2.default.children,\n  componentId: _types2.default.stringRequired,\n  defaultQuery: _types2.default.func,\n  filterLabel: _types2.default.string,\n  onQueryChange: _types2.default.func,\n  react: _types2.default.react,\n  showFilter: _types2.default.bool,\n  URLParams: _types2.default.bool,\n  onAllData: _types2.default.func\n};\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    aggregations: state.aggregations[props.componentId] && state.aggregations[props.componentId] || null,\n    hits: state.hits[props.componentId] && state.hits[props.componentId].hits || [],\n    selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null\n  };\n};\n\nvar mapDispatchtoProps = function mapDispatchtoProps(dispatch) {\n  return {\n    addComponent: function addComponent(component) {\n      return dispatch((0, _actions.addComponent)(component));\n    },\n    removeComponent: function removeComponent(component) {\n      return dispatch((0, _actions.removeComponent)(component));\n    },\n    setQueryOptions: function setQueryOptions(component, props, execute) {\n      return dispatch((0, _actions.setQueryOptions)(component, props, execute));\n    },\n    setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {\n      return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));\n    },\n    updateQuery: function updateQuery(updateQueryObject) {\n      return dispatch((0, _actions.updateQuery)(updateQueryObject));\n    },\n    watchComponent: function watchComponent(component, react) {\n      return dispatch((0, _actions.watchComponent)(component, react));\n    }\n  };\n};\n\nexports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(ReactiveComponent);","map":null,"metadata":{},"sourceType":"script"}